Native Linux File selector integration

Default to:
	* Incremental E-code
	* Remove G92 E0 from 'next layer'

* Sizing / get side panel working [!?]

* Read / grok gcode
	+ work out why extrusion is different / odd ...

Don't reverse at top speed for ages & break my extruder

Have a 'calculate steps_per_mm' for geared extruders etc.



** Native Linux File-selector:

	+ create a new thread for gtk+
	+ Problem:
		+ X lock ...
		+ so we need to take and release the fltk lock in there ...
	+ 


	Fl::run():
		while (Fl::wait());

static void Fl::add_fd(int fd, void (*cb)(int, void *), void* = 0)

static void Fl::add_fd(int fd, int when, void (*cb)(int, void*), void* = 0)

static void Fl::remove_fd(int) Add file descriptor fd to listen
to. When the fd becomes ready for reading Fl::wait() will call the
callback and then return. The callback is passed the fd and the
arbitrary void* argument.

The second version takes a when bitfield, with the bits FL_READ,
FL_WRITE, and FL_EXCEPT defined, to indicate when the callback should
be done.

There can only be one callback of each type for a file
descriptor. Fl::remove_fd() gets rid of all the callbacks for a given
file descriptor.

Under UNIX any file descriptor can be monitored (files, devices,
pipes, sockets, etc.) Due to limitations in Microsoft Windows, WIN32
applications can only monitor sockets.

* Lock / Unlock ?
	+ lock integration ?

* Fltk / gtk ...


* Threading:
	+ we should use the:
		Fl::awake() method to throw stuff to the mainloop ...

* Ascii STL support ...
	+ fun ! +

* openSUSE build service ... [!?]


* Queue up patches removing affl headers - un-needed ... clean that up

* Queue up file-chooser pieces ...
