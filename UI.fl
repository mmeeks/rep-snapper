# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
header_name {.h} 
code_name {.cxx}
decl {\#pragma warning( disable : 4311 4312 4244 4267 4800)} {public global
} 

decl {class ModelViewController;} {public global
} 

class GUI {open
} {
  Function {GUI()} {open
  } {
    Fl_Window mainWindow {
      label {RepSnapper by Kulitorum www.kulitorum.com} open
      xywh {248 117 1280 835} type Double box UP_BOX color 39 selection_color 39 labelsize 12 resizable visible
    } {
      Fl_Box MVC {
        label {An instace of ModelViewController}
        xywh {10 25 700 805} box UP_BOX align 16
        code0 {\#include "stdafx.h"}
        code1 {\#ifndef M_PI
\#define M_PI 3.14159265358979323846
\#endif}
        class ModelViewController
      }
      Fl_Tabs Tabs {
        callback {// here} open
        xywh {715 5 560 825} align 5 when 1
      } {
        Fl_Group {} {
          label Simple open
          xywh {715 25 555 765}
        } {
          Fl_Group {} {
            label Model open
            xywh {720 157 530 139} box ENGRAVED_FRAME color 39
          } {
            Fl_Button {} {
              label {Load STL}
              callback {Fl_File_Chooser chooser("C:/code/printed-parts", "*.stl", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ClearRFO();
MVC->ReadStl(dir);
MVC->redraw();
};}
              xywh {735 175 145 25}
            }
            Fl_Button {} {
              label {Convert to GCode}
              callback {MVC->ConvertToGCode();}
              xywh {735 205 145 25}
            }
            Fl_Text_Display {} {
              label {Then you want to load an STL model}
              xywh {880 175 15 25} box NO_BOX align 8
            }
            Fl_Text_Display {} {
              label {And convert it into GCODE}
              xywh {880 205 15 25} box NO_BOX align 8
            }
            Fl_Button {} {
              label {Load GCode}
              callback {Fl_File_Chooser chooser("\\\\", "*.gcode", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadGCode(dir);
MVC->redraw();
};} selected
              xywh {735 255 145 25}
            }
            Fl_Text_Display {} {
              label {Or just load previously generated GCODE directly}
              xywh {880 255 15 25} box NO_BOX align 8
            }
            Fl_Box {} {
              label {-----------------------------------------------------------------------------------------------------}
              xywh {730 230 510 25}
            }
          }
          Fl_Group {} {
            label Printer open
            xywh {720 47 535 88} box ENGRAVED_FRAME color 39
          } {
            Fl_Value_Input SerialSpeedInputSimple {
              label {Speed:}
              callback {MVC->setSerialSpeed(o->value());}
              xywh {1040 97 205 24}
            }
            Fl_Choice portInputSimple {
              label {Port:}
              callback {char buf[] = "COM1\\0"; buf[3] = buf[3]+o->value();
MVC->setPort(std::string(buf));} open
              xywh {770 96 215 25} down_box BORDER_BOX when 1
            } {
              MenuItem {} {
                label {COM 1}
                user_data 1 user_data_type long
                xywh {25 25 100 20} value 1
              }
              MenuItem {} {
                label {COM 2}
                user_data 2 user_data_type long
                xywh {35 35 100 20} value 1
              }
              MenuItem {} {
                label {COM 3}
                user_data 3 user_data_type long
                xywh {45 45 100 20} value 1
              }
              MenuItem {} {
                label {COM 4}
                user_data 4 user_data_type long
                xywh {55 55 100 20} value 1
              }
              MenuItem {} {
                label {COM 5}
                user_data 5 user_data_type long
                xywh {65 65 100 20} value 1
              }
              MenuItem {} {
                label {COM 6}
                user_data 6 user_data_type long
                xywh {75 75 100 20} value 1
              }
              MenuItem {} {
                label {COM 7}
                user_data 7 user_data_type long
                xywh {85 85 100 20} value 1
              }
              MenuItem {} {
                label {COM 8}
                user_data 8 user_data_type long
                xywh {95 95 100 20} value 1
              }
              MenuItem {} {
                label {COM 9}
                user_data 8 user_data_type long
                xywh {105 105 100 20} value 1
              }
            }
            Fl_Light_Button ConnectToPrinterSimpleButton {
              label {Connect to printer}
              callback {MVC->serialConnected();
MVC->ConnectToPrinter(o->value());}
              xywh {735 61 145 25} selection_color 2
            }
            Fl_Text_Display {} {
              label {First lets connect to the printer}
              xywh {885 60 15 25} box NO_BOX align 8
            }
          }
          Fl_Group {} {
            label Print open
            xywh {720 329 535 56} box ENGRAVED_FRAME color 39
          } {
            Fl_Text_Display {} {
              label {Make a print}
              xywh {885 342 15 25} box NO_BOX align 8
            }
            Fl_Button {} {
              label Print
              callback {MVC->SimplePrint();}
              xywh {735 342 145 25}
            }
          }
          Fl_Group {} {
            label Calibrate open
            xywh {720 416 535 54} box ENGRAVED_FRAME color 39
          } {
            Fl_Text_Display {} {
              label {Makes a test print with various settings. (Disabled)}
              xywh {885 429 15 25} box NO_BOX align 8
            }
            Fl_Button {} {
              label {Calibration Print}
              xywh {735 429 145 25} labelcolor 29
            }
          }
        }
        Fl_Group {} {
          label {Input file} open
          xywh {715 25 560 790} hide
        } {
          Fl_Button {} {
            label {Load STL}
            callback {Fl_File_Chooser chooser("C:/code/printed-parts", "*.stl", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadStl(dir);
MVC->redraw();
};}
            xywh {725 35 130 25}
          }
          Fl_Light_Button FixSTLerrorsButton {
            label {Fix STL errors}
            callback {MVC->redraw()}
            xywh {995 35 135 25} value 1 selection_color 63
          }
          Fl_Button {} {
            label {Save STL}
            callback {Fl_File_Chooser chooser("C:/code/printed-parts", "*.stl", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadStl(dir);
MVC->redraw();
};}
            xywh {855 35 135 25} deactivate
          }
          Fl_Group {} {
            label {Object rotation} open
            xywh {720 740 535 50} box FLAT_BOX color 39
          } {
            Fl_Button AutoRotateButton {
              label {Auto rotate}
              callback {MVC->OptimizeRotation();
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();}
              xywh {730 750 125 25}
            }
            Fl_Button RotateXButton {
              label {Rotate X}
              callback {MVC->RotateObject(1,0,0, (float)(M_PI/4));
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();}
              xywh {860 750 125 25}
            }
            Fl_Button RotateYButton {
              label {Rotate Y}
              callback {MVC->RotateObject(0,1,0, (float)(M_PI/4));
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();}
              xywh {990 750 125 25}
            }
            Fl_Button RotateZButton {
              label {Rotate Z}
              callback {MVC->RotateObject(0,0,1, (float)(M_PI/4));
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();}
              xywh {1120 750 125 25}
            }
          }
          Fl_Button {} {
            label {Save settings}
            callback {Fl_Text_Buffer* buffer = GCodeStart->buffer();
char* pText = buffer->text();
MVC->ProcessControl.GCodeStartText = string(pText);
free(pText);
buffer = GCodeLayer->buffer();
pText = buffer->text();
MVC->ProcessControl.GCodeLayerText = string(pText);
free(pText);
buffer = GCodeEnd->buffer();
pText = buffer->text();
MVC->ProcessControl.GCodeEndText = string(pText);
free(pText);
MVC->ProcessControl.SaveXML();}
            xywh {1130 35 135 25}
          }
          Fl_Button {} {
            label {Load RFO}
            callback {Fl_File_Chooser chooser("C:/code/printed-parts", "*.xml", Fl_File_Chooser::SINGLE, "Choose RFO file");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadRFO(dir);
MVC->redraw();
};}
            xywh {725 65 130 25}
          }
          Fl_Box RFP_Browser {
            label {RFO file}
            callback {MVC->redraw();}
            xywh {725 95 355 440} box UP_BOX align 16 when 1 resizable
            code0 {\#include "Flu_Tree_Browser.h"}
            class Flu_Tree_Browser
          }
          Fl_Group {} {
            label Translate open
            xywh {1085 165 180 40} box ENGRAVED_FRAME color 39
          } {
            Fl_Value_Input TranslateX {
              label X
              callback {MVC->Translate("X", o->value());}
              xywh {1100 176 45 23} minimum -300 maximum 300 step 0.1
            }
            Fl_Value_Input TranslateY {
              label Y
              callback {MVC->Translate("Y", o->value());}
              xywh {1160 177 45 23} minimum -300 maximum 300 step 0.1
            }
            Fl_Value_Input TranslateZ {
              label Z
              callback {MVC->Translate("Z", o->value());}
              xywh {1215 177 45 23} minimum -300 maximum 300 step 0.01
            }
          }
          Fl_Group {} {
            label Rotate open
            xywh {1085 230 180 40} box ENGRAVED_FRAME color 39
          } {
            Fl_Value_Input RotateX {
              label X
              callback {MVC->RotateObject(1,0,0, o->value());}
              xywh {1100 241 45 23} minimum -360 maximum 360 step 1
            }
            Fl_Value_Input RotateY {
              label Y
              callback {MVC->RotateObject(0,1,0, o->value());}
              xywh {1160 242 45 23} minimum -360 maximum 360 step 1
            }
            Fl_Value_Input RotateZ {
              label Z
              callback {MVC->RotateObject(0,0,1, o->value());}
              xywh {1215 242 45 23} minimum -360 maximum 360 step 1
            }
          }
          Fl_Group {} {
            label Scale open
            xywh {1085 290 180 70} box ENGRAVED_FRAME color 39
          } {
            Fl_Value_Input ScaleX {
              label X
              callback {MVC->Scale("X", o->value());}
              xywh {1100 301 45 23} minimum -100 maximum 100 step 0.01 value 1
            }
            Fl_Value_Input ScaleY {
              label Y
              callback {MVC->Scale("Y", o->value());}
              xywh {1160 302 45 23} minimum -100 maximum 100 step 0.01 value 1
            }
            Fl_Value_Input ScaleZ {
              label Z
              callback {MVC->Scale("Z", o->value());}
              xywh {1215 302 45 23} minimum -100 maximum 100 step 0.01 value 1
            }
            Fl_Light_Button ScaleAllAxies {
              label {All axis}
              xywh {1100 330 160 20} value 1 selection_color 2
            }
          }
          Fl_Input FileLocationInput {
            label {File location}
            callback {MVC->setFileLocation(o->value());}
            xywh {1085 421 180 24} align 5
          }
          Fl_Input FileTypeInput {
            label Filetype
            callback {MVC->setFileType(o->value());}
            xywh {1085 466 180 24} align 5
          }
          Fl_Input FileMaterialInput {
            label {File material}
            callback {MVC->setFileMaterial(o->value());}
            xywh {1085 511 180 24} align 5
          }
          Fl_Input ObjectNameInput {
            label {Object name}
            callback {MVC->setObjectname(o->value());}
            xywh {1085 376 180 24} align 5
          }
          Fl_Button {} {
            label {New RFO Object}
            callback {MVC->newObject();}
            xywh {855 65 135 25}
          }
          Fl_Button {} {
            label {Save RFO}
            callback {MVC->ProcessControl.rfo.Save(string("test.xml"), MVC->ProcessControl);}
            xywh {1130 65 135 25}
          }
          Fl_Button {} {
            label Delete
            callback {MVC->ProcessControl.rfo.DeleteSelected();}
            xywh {995 65 135 25}
          }
          Fl_Button {} {
            label Duplicate
            callback {MVC->Duplicate();}
            xywh {1130 95 135 25}
          }
        }
        Fl_Group PrinterDefinitionTab {
          label {Printer definition} open
          xywh {715 25 545 790} hide
        } {
          Fl_Group {} {
            label {Build volume (mm)} open
            xywh {720 50 230 40} box ENGRAVED_FRAME color 39
          } {
            Fl_Value_Input VolumeX {
              label X
              xywh {740 61 45 23} maximum 5000 step 1 value 200
            }
            Fl_Value_Input VolumeY {
              label Y
              xywh {815 61 45 23} maximum 5000 value 200
            }
            Fl_Value_Input VolumeZ {
              label Z
              xywh {890 61 45 23} maximum 5000 value 140
            }
          }
          Fl_Group {} {
            label {Print margin  (mm)} open
            xywh {1020 50 235 40} box ENGRAVED_FRAME color 39
          } {
            Fl_Value_Input MarginX {
              label X
              callback {MVC->SetPrintMargin("X", o->value());}
              xywh {1045 61 45 23} maximum 100 step 1 value 10
            }
            Fl_Value_Input MarginY {
              label Y
              callback {MVC->SetPrintMargin("Y", o->value());}
              xywh {1120 61 45 23} maximum 100 step 1 value 10
            }
            Fl_Value_Input MarginZ {
              label Y
              callback {MVC->SetPrintMargin("Z", o->value());}
              xywh {1190 62 45 23} minimum -50 maximum 100 step 0.01
            }
          }
          Fl_Group {} {
            label Acceleration open
            xywh {720 630 535 80} box ENGRAVED_FRAME color 39
          } {
            Fl_Value_Slider distanceToReachFullSpeedSlider {
              label {Distance used to read full speed(mm)}
              callback {MVC->SetDistanceToReachFullSpeed(o->value())}
              xywh {730 680 515 20} type {Horz Knob} selection_color 2 align 5 maximum 10 value 0.1 textsize 14
            }
            Fl_Light_Button EnableAccelerationButton {
              label {Enable Acceleration}
              callback {MVC->SetEnableAcceleration(o->value());
if(o->value())
{
distanceToReachFullSpeedSlider->activate();
}
else
{
distanceToReachFullSpeedSlider->deactivate();
}}
              xywh {730 640 255 20} selection_color 63
            }
          }
          Fl_Group {} {
            label {Print speeds}
            xywh {720 435 535 170} box ENGRAVED_FRAME color 39
          } {
            Fl_Value_Slider MaxPrintSpeedXYSlider {
              label {Max PrintSpeed XY (mm/minute)}
              callback {MVC->SetMaxPrintSpeedXY(o->value());}
              xywh {730 495 515 20} type {Horz Knob} selection_color 2 align 5 maximum 8000 step 100 value 4000 textsize 14
            }
            Fl_Value_Slider MinPrintSpeedZSlider {
              label {Min PrintSpeed Z (mm/minute)}
              callback {MVC->SetMinPrintSpeedZ(o->value());}
              xywh {730 535 515 20} type {Horz Knob} selection_color 2 align 5 minimum 1 maximum 2500 step 10 value 50 textsize 14
            }
            Fl_Value_Slider MinPrintSpeedXYSlider {
              label {Min PrintSpeed XY (mm/minute)}
              callback {MVC->SetMinPrintSpeedXY(o->value());}
              xywh {730 455 515 20} type {Horz Knob} selection_color 2 align 5 maximum 8000 step 100 value 1000 textsize 14
            }
            Fl_Value_Slider MaxPrintSpeedZSlider {
              label {Max PrintSpeed Z (mm/minute)}
              callback {MVC->SetMaxPrintSpeedZ(o->value());}
              xywh {730 575 515 20} type {Horz Knob} selection_color 2 align 5 maximum 2500 step 10 value 150 textsize 14
            }
          }
          Fl_Group {} {
            label Extruder open
            xywh {720 115 535 220} box ENGRAVED_FRAME color 39
          } {
            Fl_Value_Slider ExtrudedMaterialWidthSlider {
              label {Extruded material width}
              callback {MVC->SetExtrudedMaterialWidth(o->value());}
              xywh {730 210 515 20} type {Horz Knob} selection_color 2 align 5 maximum 10 value 0.7 textsize 14
            }
            Fl_Value_Slider extrusionFactorSlider {
              label {Extrusion multiplier}
              callback {MVC->SetExtrusionFactor(o->value());}
              xywh {730 250 515 20} type {Horz Knob} selection_color 2 align 5 maximum 2 value 1 textsize 14
            }
            Fl_Light_Button UseIncrementalEcodeButton {
              label {Use incremental ecode (for seperate extruder controller)}
              callback {MVC->SetUseIncrementalEcode(o->value());}
              xywh {730 125 515 20} selection_color 63
            }
            Fl_Value_Slider LayerThicknessSlider {
              label {Layer Thickness}
              callback {MVC->SetLayerThickness(o->value());}
              xywh {730 290 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 3 step 0.1 value 0.4 textsize 14
            }
            Fl_Light_Button Use3DGcodeButton {
              label {Use 3D Gcode (for non-stepper extruders)}
              callback {MVC->SetUse3DGcode(o->value());}
              xywh {730 155 515 20} selection_color 63
            }
          }
          Fl_Group {} {
            label Port open
            xywh {720 736 535 53} box ENGRAVED_FRAME color 39
          } {
            Fl_Value_Input SerialSpeedInput {
              label {Speed:}
              callback {MVC->setSerialSpeed(o->value());}
              xywh {1040 751 205 24}
            }
            Fl_Choice portInput {
              label {Port:}
              callback {char buf[] = "COM1\\0"; buf[3] = buf[3]+o->value();
MVC->setPort(std::string(buf));} open
              xywh {770 750 215 25} down_box BORDER_BOX when 1
            } {
              MenuItem {} {
                label {COM 1}
                user_data 1 user_data_type long
                xywh {10 10 100 20} value 1
              }
              MenuItem {} {
                label {COM 2}
                user_data 2 user_data_type long
                xywh {20 20 100 20} value 1
              }
              MenuItem {} {
                label {COM 3}
                user_data 3 user_data_type long
                xywh {30 30 100 20} value 1
              }
              MenuItem {} {
                label {COM 4}
                user_data 4 user_data_type long
                xywh {40 40 100 20} value 1
              }
              MenuItem {} {
                label {COM 5}
                user_data 5 user_data_type long
                xywh {50 50 100 20} value 1
              }
              MenuItem {} {
                label {COM 6}
                user_data 6 user_data_type long
                xywh {60 60 100 20} value 1
              }
              MenuItem {} {
                label {COM 7}
                user_data 7 user_data_type long
                xywh {70 70 100 20} value 1
              }
              MenuItem {} {
                label {COM 8}
                user_data 8 user_data_type long
                xywh {80 80 100 20} value 1
              }
              MenuItem {} {
                label {COM 9}
                user_data 8 user_data_type long
                xywh {90 90 100 20} value 1
              }
            }
          }
          Fl_Group {} {
            label {Shrinking quality} open
            xywh {720 360 535 50} box ENGRAVED_FRAME color 2
          } {
            Fl_Light_Button shrinkFastButton {
              label {Fast, can have errors (rarely)}
              callback {if(o->value())
{
MVC->SetShrinkQuality("Fast");
MVC->redraw();
shrinkNiceButton->value(0);
}}
              xywh {735 375 250 20} type Radio selection_color 2
            }
            Fl_Group {} {open
              xywh {995 375 250 25}
            } {
              Fl_Light_Button shrinkNiceButton {
                label {Much slower, perfekt, small details}
                callback {if(o->value())
{
MVC->SetShrinkQuality("nice");
MVC->redraw();
shrinkFastButton->value(0);
}}
                xywh {995 375 250 20} type Radio color 47 selection_color 2
              }
            }
          }
        }
        Fl_Group {} {
          label Infill
          xywh {715 25 540 755} hide
        } {
          Fl_Group {} {
            label Infill open
            xywh {720 50 535 170} box ENGRAVED_FRAME color 39
          } {
            Fl_Value_Slider InfillRotationSlider {
              label Rotation
              callback {MVC->SetInfillRotation(o->value());}
              xywh {730 110 515 20} type {Horz Knob} selection_color 2 align 5 maximum 360 step 1 value 45 textsize 14
            }
            Fl_Value_Slider InfillRotationPrLayerSlider {
              label {InFill Rotation pr. Layer}
              callback {MVC->SetInfillRotationPrLayer(o->value());}
              xywh {730 150 515 20} type {Horz Knob} selection_color 2 align 5 maximum 360 step 1 value 90 textsize 14
            }
            Fl_Value_Slider InfillDistanceSlider {
              label {Infill Distance}
              callback {MVC->SetInfillDistance(o->value());}
              xywh {730 190 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 10 step 0.1 value 2 textsize 14
            }
            Fl_Light_Button ShellOnlyButton {
              label {Shell Only - no infill}
              callback {MVC->SetShellOnly(o->value());}
              xywh {730 70 255 20} selection_color 63
            }
            Fl_Value_Slider ShellCountSlider {
              label {Shell count}
              callback {MVC->SetShellCount(o->value());}
              xywh {990 70 255 20} type {Horz Knob} selection_color 2 align 5 minimum 1 maximum 10 step 1 value 1 textsize 14
            }
          }
        }
        Fl_Group {} {
          label Raft
          xywh {715 25 540 765} color 47 hide
        } {
          Fl_Group {} {
            label Base open
            xywh {715 205 535 270} box ENGRAVED_FRAME color 39
          } {
            Fl_Value_Slider RaftMaterialPrDistanceRatioSlider {
              label {Material pr. distance ratio}
              callback {MVC->SetRaftMaterialPrDistanceRatio(o->value());}
              xywh {725 270 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 3 step 0.1 value 1.75 textsize 14
            }
            Fl_Value_Slider RaftRotationSlider {
              label Rotation
              callback {MVC->SetRaftRotation(o->value());}
              xywh {725 310 515 20} type {Horz Knob} selection_color 2 align 5 maximum 360 step 1 value 90 textsize 14
            }
            Fl_Value_Slider RaftBaseDistanceSlider {
              label {Distance between lines}
              callback {MVC->SetRaftBaseDistance(o->value());}
              tooltip {Distance between the base layer's lines} xywh {725 355 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 10 step 0.1 value 2 textsize 14
            }
            Fl_Value_Slider RaftBaseThicknessSlider {
              label {Thinkness ratio}
              callback {MVC->SetRaftBaseThickness(o->value());}
              tooltip {How much thicker or thinner then a normal layer should the raft base be.} xywh {725 400 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 3 step 0.1 value 1 textsize 14
            }
            Fl_Value_Slider RaftBaseLayerCountSlider {
              label {Number of Base layers}
              callback {MVC->SetRaftBaseLayerCount(o->value());}
              xywh {725 230 515 20} type {Horz Knob} selection_color 2 align 5 maximum 5 step 1 value 1 textsize 14
            }
            Fl_Value_Slider RaftBaseTemperatureSlider {
              label {Temperature ratio}
              callback {MVC->SetRaftBaseTemperature(o->value());}
              tooltip {To make the flow better, you may want to print the base layers hotter then the rest of the print.} xywh {725 445 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 3 value 1.1 textsize 14
            }
          }
          Fl_Group {} {
            label Size open
            xywh {715 130 535 55} box ENGRAVED_FRAME color 39
          } {
            Fl_Value_Slider RaftSizeSlider {
              label {Larger then objects (mm)}
              callback {MVC->SetRaftSize(o->value());}
              tooltip {How much larget then the print should the Raft be.} xywh {725 155 515 20} type {Horz Knob} selection_color 2 align 5 minimum 1 maximum 50 value 1.33 textsize 14
            }
          }
          Fl_Group {} {
            label Interface open
            tooltip {This is the layer(s) connecting to the print itself. Unlike the Base layer, they should be "nice" and with a normal extrusion ratio.} xywh {715 505 535 285} box ENGRAVED_FRAME color 39
          } {
            Fl_Value_Slider RaftInterfaceMaterialPrDistanceRatioSlider {
              label {Material pr. distance ratio}
              callback {MVC->SetRaftInterfaceMaterialPrDistanceRatio(o->value());}
              xywh {725 580 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 3 step 0.1 value 1 textsize 14
            }
            Fl_Value_Slider RaftRotationPrLayerSlider {
              label {Rotation pr. layer}
              callback {MVC->SetRaftRotationPrLayer(o->value());}
              xywh {725 625 515 20} type {Horz Knob} selection_color 2 align 5 maximum 360 step 1 value 90 textsize 14
            }
            Fl_Value_Slider RaftInterfaceDistanceSlider {
              label {Distance between lines}
              callback {MVC->SetRaftInterfaceDistance(o->value());}
              tooltip {Distance between the base layer's lines} xywh {725 670 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 10 step 0.1 value 2 textsize 14
            }
            Fl_Value_Slider RaftInterfaceThicknessSlider {
              label {Thinkness ratio}
              callback {MVC->SetRaftBaseThickness(o->value());}
              tooltip {How much thicker or thinner then a normal layer should the raft base be.} xywh {725 715 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 3 step 0.1 value 1 textsize 14
            }
            Fl_Value_Slider RaftInterfaceLayerCountSlider {
              label {Number of interface layers}
              callback {MVC->SeRaftInterfaceLayerCount(o->value());}
              xywh {725 535 515 20} type {Horz Knob} selection_color 2 align 5 maximum 5 step 1 value 2 textsize 14
            }
            Fl_Value_Slider RaftInterfaceTemperatureSlider {
              label {Temperature ratio}
              callback {MVC->SetRaftInterfaceTemperature(o->value());}
              tooltip {To make the flow better, you may want to print the base layers hotter then the rest of the print.} xywh {725 760 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 3 value 1.1 textsize 14
            }
          }
          Fl_Group {} {
            label Size open
            xywh {715 45 535 55} box ENGRAVED_FRAME color 39
          } {
            Fl_Light_Button RaftEnableButton {
              label Enable
              callback {MVC->SetRaftEnable(o->value());
MVC->redraw();}
              xywh {720 65 255 25}
            }
            Fl_Light_Button {} {
              label Preview
              callback {MVC->SetApronPreview(o->value());}
              xywh {980 65 255 25} deactivate
            }
          }
        }
        Fl_Group {} {
          label GCode open
          xywh {715 25 540 790} hide
        } {
          Fl_Button {} {
            label {Load Gcode}
            callback {Fl_File_Chooser chooser("\\\\", "*.gcode", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadGCode(dir);
MVC->redraw();
};}
            xywh {715 75 145 25}
            code0 {\#include <FL/Fl_File_Chooser.H>}
          }
          Fl_Output GCodeLengthText {
            xywh {865 76 225 24}
          }
          Fl_Button {} {
            label {Convert to GCode}
            callback {MVC->ConvertToGCode();}
            xywh {715 45 145 25}
          }
          Fl_Tabs {} {open
            xywh {715 105 525 710} color 66 selection_color 31
          } {
            Fl_Text_Editor GCodeStart {
              label Start
              xywh {715 125 525 690} selection_color 31 hide
              code0 {Fl_Text_Buffer *startbuff = new Fl_Text_Buffer();}
              code1 {o->buffer(startbuff);}
            }
            Fl_Text_Editor GCodeLayer {
              label {Next layer}
              xywh {715 125 525 690} selection_color 31 hide
              code0 {Fl_Text_Buffer *layerbuff = new Fl_Text_Buffer();}
              code1 {o->buffer(layerbuff);}
            }
            Fl_Text_Editor GCodeEnd {
              label {End code}
              xywh {715 125 525 690} selection_color 31 hide
              code0 {Fl_Text_Buffer *endbuff = new Fl_Text_Buffer();}
              code1 {o->buffer(endbuff);}
            }
            Fl_Text_Editor GCodeResult {
              label Result
              xywh {715 125 525 690} selection_color 31
              code0 {Fl_Text_Buffer *resultbuff = new Fl_Text_Buffer();}
              code1 {o->buffer(resultbuff);}
            }
          }
          Fl_Button {} {
            label {Save Gcode}
            callback {Fl_File_Chooser chooser("\\\\", "*.gcode", Fl_File_Chooser::CREATE, "Choose filename");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
Fl_Text_Buffer *buffer = GCodeResult->buffer();

int result = buffer->savefile(chooser.value());

switch(result)
{
case 0:	// Succes
break;
case 1:	//Open for write failed
fl_alert("Error saving GCode file, error creating file.", "OK");
break;
case 2: // Partially saved file
fl_alert("Error saving GCode file, while writing file, is the disk full?.", "OK");
break;
}

MVC->redraw();
};}
            xywh {1095 75 145 25}
            code0 {\#include <FL/Fl_File_Chooser.H>}
          }
        }
        Fl_Group {} {
          label Rendering
          xywh {715 25 540 755} color 47 hide
        } {
          Fl_Group {} {
            label {STL rendering} open
            xywh {715 55 535 305} box ENGRAVED_FRAME color 39
          } {
            Fl_Light_Button DisplayPolygonsButton {
              label {Display Polygons}
              callback {MVC->SetDisplayPolygons(o->value());}
              xywh {750 65 220 20} value 1 selection_color 63
            }
            Fl_Light_Button DisplayWireframeButton {
              label {Display Wireframe}
              callback {MVC->SetDisplayWireframe(o->value());}
              xywh {1015 65 140 20} selection_color 63
            }
            Fl_Light_Button DisplayNormalsButton {
              label {Display Normals}
              callback {MVC->SetDisplayNormals(o->value());}
              xywh {750 190 220 20} selection_color 63
            }
            Fl_Light_Button DisplayEndpointsButton {
              label {Display Endpoints}
              callback {MVC->SetDisplayEndpoints(o->value());}
              xywh {1015 190 220 20} selection_color 63
            }
            Fl_Value_Slider PolygonValSlider {
              label Val
              callback {MVC->SetPolygonVal(o->value());
MVC->redraw();}
              xywh {750 130 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider PolygonSatSlider {
              label Sat
              callback {MVC->SetPolygonSat(o->value());
MVC->redraw();}
              xywh {750 110 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider PolygonHueSlider {
              label Hue
              callback {MVC->SetPolygonHue(o->value());
MVC->redraw();}
              xywh {750 90 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider WireframeValSlider {
              label Val
              callback {MVC->SetWireframeVal(o->value());
MVC->redraw();}
              xywh {1015 130 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider WireframeSatSlider {
              label Sat
              callback {MVC->SetWireframeSat(o->value());
MVC->redraw();}
              xywh {1015 110 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider WireframeHueSlider {
              label Hue
              callback {MVC->SetWireframeHue(o->value());
MVC->redraw();}
              xywh {1015 90 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider NormalValSlider {
              label Val
              callback {MVC->SetNormalsVal(o->value());
MVC->redraw();}
              xywh {750 255 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider NormalSatSlider {
              label Sat
              callback {MVC->SetNormalsSat(o->value());
MVC->redraw();}
              xywh {750 235 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider NormalHueSlider {
              label Hue
              callback {MVC->SetNormalsHue(o->value());
MVC->redraw();}
              xywh {750 215 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider EndpointValSlider {
              label Val
              callback {MVC->SetEndpointsVal(o->value());
MVC->redraw();}
              xywh {1015 255 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider EndpointSatSlider {
              label Sat
              callback {MVC->SetEndpointsSat(o->value());
MVC->redraw();}
              xywh {1015 235 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider EndpointHueSlider {
              label Hue
              callback {MVC->SetEndpointsHue(o->value());
MVC->redraw();}
              xywh {1015 215 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Light_Button DisplayBBoxButton {
              label {Display Bounding Box}
              callback {MVC->SetDisplayBBox(o->value());}
              xywh {750 335 220 20} selection_color 63
            }
            Fl_Value_Slider HighlightSlider {
              label Highlight
              callback {MVC->SetHighlight(o->value());
MVC->redraw();}
              xywh {1015 335 220 20} type {Horz Knob} selection_color 2 align 5 value 0.5 textsize 14
            }
            Fl_Value_Slider NormalLengthSlider {
              label {Normals length}
              callback {MVC->SetNormalsLength(o->value());
MVC->redraw();}
              xywh {750 295 220 20} type {Horz Knob} selection_color 2 align 5 minimum 1 maximum 30 step 0.1 value 10 textsize 14
            }
            Fl_Value_Slider EndpointSizeSlider {
              label {Endpoints size}
              callback {MVC->SetEndPointSize(o->value());
MVC->redraw();}
              xywh {1015 295 220 20} type {Horz Knob} selection_color 2 align 5 minimum 1 maximum 20 step 0.1 value 8 textsize 14
            }
            Fl_Light_Button DisplayWireframeShadedButton {
              label Shaded
              callback {MVC->SetDisplayWireframeShaded(o->value());}
              xywh {1160 65 75 20} selection_color 63
            }
            Fl_Value_Slider PolygonOpasitySlider {
              label Opa
              callback {MVC->SetPolygonOpasity(o->value());
MVC->redraw();}
              xywh {750 150 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
          }
          Fl_Group {} {
            label {GCode rendering} open
            xywh {715 380 535 185} box ENGRAVED_FRAME color 39
          } {
            Fl_Light_Button DisplayGCodeButton {
              label {Display GCode}
              callback {MVC->SetDisplayGCode(o->value());
MVC->redraw();}
              xywh {750 390 220 20} value 1 selection_color 63
            }
            Fl_Value_Slider GCodeExtrudeValSlider {
              label Val
              callback {MVC->SetGCodeExtrudeVal(o->value());
MVC->redraw();}
              xywh {750 455 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider GCodeExtrudeSatSlider {
              label Sat
              callback {MVC->SetGCodeExtrudeSat(o->value());
MVC->redraw();}
              xywh {750 435 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider GCodeExtrudeHueSlider {
              label Hue
              callback {MVC->SetGCodeExtrudeHue(o->value());
MVC->redraw();}
              xywh {750 415 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Light_Button LuminanceShowsSpeedButton {
              label {Luminance shows speed}
              callback {MVC->SetLuminanceShowsSpeed(o->value());
MVC->redraw();}
              xywh {1015 390 220 20} value 1 selection_color 63
            }
            Fl_Button {} {
              label {Crop Range}
              callback {float start = GCodeDrawStartSlider->value();
float end = GCodeDrawEndSlider->value();
GCodeDrawStartSlider->range(start,end);
GCodeDrawEndSlider->range(start,end);
GCodeDrawStartSlider->redraw();
GCodeDrawEndSlider->redraw();}
              xywh {750 530 220 20}
            }
            Fl_Button {} {
              label {Reset crop range}
              callback {GCodeDrawStartSlider->range(0,1);
GCodeDrawEndSlider->range(0,1);
GCodeDrawStartSlider->redraw();
GCodeDrawEndSlider->redraw();}
              xywh {1020 530 220 20}
            }
            Fl_Slider GCodeDrawStartSlider {
              label From
              callback {MVC->SetGCodeDrawStart(o->value());}
              xywh {750 480 490 20} type {Horz Knob} color 39 selection_color 2 align 4
            }
            Fl_Slider GCodeDrawEndSlider {
              label To
              callback {MVC->SetGCodeDrawEnd(o->value());}
              xywh {750 505 490 20} type {Horz Knob} color 39 selection_color 2 align 4
            }
            Fl_Value_Slider GCodeMoveValSlider {
              label Val
              callback {MVC->SetGCodeMoveVal(o->value());
MVC->redraw();}
              xywh {1015 455 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider GCodeMoveSatSlider {
              label Sat
              callback {MVC->SetGCodeMoveSat(o->value());
MVC->redraw();}
              xywh {1015 435 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider GCodeMoveHueSlider {
              label Hue
              callback {MVC->SetGCodeMoveHue(o->value());
MVC->redraw();}
              xywh {1015 415 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
          }
          Fl_Group {} {
            label {Layer preview} open
            xywh {715 585 540 90} box ENGRAVED_FRAME color 39
          } {
            Fl_Value_Slider CuttingPlaneValueSlider {
              label Cuttingplane
              callback {MVC->SetCuttingPlaneValue(o->value());}
              xywh {725 645 515 20} type {Horz Knob} align 5 value 0.5 textsize 14
            }
            Fl_Light_Button DisplayCuttingPlaneButton {
              label {Display CuttingPlane}
              callback {MVC->SetDisplayCuttingPlane(o->value());}
              xywh {725 600 170 20} selection_color 63
            }
            Fl_Light_Button DisplayinFillButton {
              label {Display inFill}
              callback {MVC->SetDisplayinFill(o->value());}
              xywh {900 600 165 20} selection_color 63
            }
            Fl_Light_Button DisplayAllLayersButton {
              label {Display all layers}
              callback {MVC->SetDisplayAllLayers(o->value());}
              xywh {1070 600 170 20} selection_color 63
            }
          }
          Fl_Group {} {
            label Lights open
            xywh {715 695 540 70} box ENGRAVED_FRAME color 39
          } {
            Fl_Light_Button {} {
              label {Enable light 0}
              callback {MVC->SetEnableLight(0, o->value());}
              xywh {725 710 120 20} value 1 selection_color 63
            }
            Fl_Light_Button {} {
              label {Enable light 1}
              callback {MVC->SetEnableLight(1, o->value());}
              xywh {725 735 120 20} selection_color 63
            }
            Fl_Light_Button {} {
              label {Enable light 2}
              callback {MVC->SetEnableLight(2, o->value());}
              xywh {985 710 120 20} selection_color 63
            }
            Fl_Light_Button {} {
              label {Enable light 3}
              callback {MVC->SetEnableLight(3, o->value());}
              xywh {985 735 120 20} value 1 selection_color 63
            }
            Fl_Button {} {
              label {Edit light 0}
              xywh {850 710 130 20} deactivate
            }
            Fl_Button {} {
              label {Edit light 1}
              xywh {850 735 130 20} deactivate
            }
            Fl_Button {} {
              label {Edit light 2}
              xywh {1110 710 130 20} deactivate
            }
            Fl_Button {} {
              label {Edit light 3}
              xywh {1110 735 130 20} deactivate
            }
          }
        }
        Fl_Group PrintTab {
          label Print open
          xywh {715 25 550 805} color 47 hide
        } {
          Fl_Tabs {} {open
            xywh {715 230 550 600}
          } {
            Fl_Group {} {
              label {Communation Log} open
              xywh {720 255 545 575} hide
            } {
              Fl_Browser CommunationLog {
                label {Errors / warnings}
                xywh {720 260 540 570} selection_color 31 align 16
                code0 {\#include <FL/Fl_Multi_Browser.H>}
                class Fl_Multi_Browser
              }
            }
            Fl_Browser ErrorLog {
              label {Errors / warnings}
              xywh {720 260 540 570} selection_color 31 align 16 hide
              code0 {\#include <FL/Fl_Multi_Browser.H>}
              class Fl_Multi_Browser
            }
            Fl_Browser Echo {
              label Echo
              xywh {720 260 540 570} selection_color 31 align 16 hide
              code0 {\#include <FL/Fl_Multi_Browser.H>}
              class Fl_Multi_Browser
            }
            Fl_Group {} {
              label {Interactive control} open
              xywh {725 260 535 570} selection_color 31
            } {
              Fl_Light_Button SwitchHeatOnButton {
                label {Switch heat on}
                callback {MVC->SwitchHeat(o->value(), TargetTempText->value());}
                xywh {730 420 220 25}
              }
              Fl_Value_Input TargetTempText {
                label {Target temp}
                callback {MVC->SetTargetTemp(o->value());}
                xywh {1185 421 55 24} maximum 300 value 200
              }
              Fl_Light_Button RunExtruderButton {
                label {Run extruder}
                callback {MVC->RunExtruder();}
                xywh {730 450 115 25}
              }
              Fl_Light_Button SetExtruderDirectionButton {
                label Reverse
                callback {MVC->SetExtruderDirection(o->value());}
                xywh {850 450 100 25}
              }
              Fl_Button {} {
                label Home
                callback {MVC->Home("X");}
                xywh {740 265 83 25}
              }
              Fl_Button {} {
                label Home
                callback {MVC->Home("Y");}
                xywh {740 295 83 25}
              }
              Fl_Button {} {
                label Home
                callback {MVC->Home("Z");}
                xywh {740 325 83 25}
              }
              Fl_Button {} {
                label {Find position in Gcode}
                xywh {1060 355 173 25} deactivate
              }
              Fl_Value_Slider {} {
                label Speed
                callback {MVC->SetExtruderSpeed(o->value());}
                xywh {1005 450 235 25} type {Horz Knob} align 4 minimum 5 maximum 9999 step 1 value 3000 textsize 14
              }
              Fl_Value_Slider {} {
                label Length
                callback {MVC->SetExtruderLength(o->value());}
                xywh {1005 480 235 25} type {Horz Knob} align 4 minimum 10 maximum 850 step 1 value 150 textsize 14
              }
              Fl_Output CurrentTempText {
                label {Current temp}
                xywh {1045 421 55 24}
              }
              Fl_Button {} {
                label {Home all}
                callback {MVC->Home("ALL");}
                xywh {740 355 85 25}
              }
              Fl_Button {} {
                label {-10}
                callback {MVC->Move("X", -10);}
                xywh {880 265 40 25}
              }
              Fl_Button {} {
                label {-1}
                callback {MVC->Move("X", -1);}
                xywh {925 265 40 25}
              }
              Fl_Button {} {
                label {-0.1}
                callback {MVC->Move("X", -0.1f);}
                xywh {970 265 40 25}
              }
              Fl_Button {} {
                label {+0.1}
                callback {MVC->Move("X", 0.1f);}
                xywh {1060 265 40 25}
              }
              Fl_Button {} {
                label {+1}
                callback {MVC->Move("X", 1);}
                xywh {1105 265 40 25}
              }
              Fl_Button {} {
                label {+10}
                callback {MVC->Move("X", 10);}
                xywh {1150 265 40 25}
              }
              Fl_Button {} {
                label {-100}
                callback {MVC->Move("X", -100);}
                xywh {835 265 40 25}
              }
              Fl_Button {} {
                label {+100}
                callback {MVC->Move("X", 100);}
                xywh {1195 265 40 25}
              }
              Fl_Button {} {
                label {-10}
                callback {MVC->Move("Y", -10);}
                xywh {880 295 40 25}
              }
              Fl_Button {} {
                label {-1}
                callback {MVC->Move("Y", -1);}
                xywh {925 295 40 25}
              }
              Fl_Button {} {
                label {-0.1}
                callback {MVC->Move("Y", -0.1f);}
                xywh {970 295 40 25}
              }
              Fl_Button {} {
                label {+0.1}
                callback {MVC->Move("Y", 0.1f);}
                xywh {1060 295 40 25}
              }
              Fl_Button {} {
                label {+1}
                callback {MVC->Move("Y", 1);}
                xywh {1105 295 40 25}
              }
              Fl_Button {} {
                label {+10}
                callback {MVC->Move("Y", 10);}
                xywh {1150 295 40 25}
              }
              Fl_Button {} {
                label {-100}
                callback {MVC->Move("Y", -100);}
                xywh {835 295 40 25}
              }
              Fl_Button {} {
                label {+100}
                callback {MVC->Move("Y", 100);}
                xywh {1195 295 40 25}
              }
              Fl_Button {} {
                label {-10}
                callback {MVC->Move("Z", -10);}
                xywh {880 325 40 25}
              }
              Fl_Button {} {
                label {-1}
                callback {MVC->Move("Z", -1);}
                xywh {925 325 40 25}
              }
              Fl_Button {} {
                label {-0.1}
                callback {MVC->Move("Z", -0.1f);}
                xywh {970 325 40 25}
              }
              Fl_Button {} {
                label {+0.1}
                callback {MVC->Move("Z", 0.1f);}
                xywh {1060 325 40 25}
              }
              Fl_Button {} {
                label {+1}
                callback {MVC->Move("Z", 1);}
                xywh {1105 325 40 25}
              }
              Fl_Button {} {
                label {+10}
                callback {MVC->Move("Z", 10);}
                xywh {1150 325 40 25}
              }
              Fl_Button {} {
                label {-100}
                callback {MVC->Move("Z", -100);}
                xywh {835 325 40 25}
              }
              Fl_Button {} {
                label {+100}
                callback {MVC->Move("Z", 100);}
                xywh {1195 325 40 25}
              }
              Fl_Value_Input XposText {
                callback {MVC->Goto("X", o->value());}
                xywh {1015 266 40 24} maximum 500
              }
              Fl_Value_Input YposText {
                callback {MVC->Goto("Y", o->value());}
                xywh {1015 296 40 24} maximum 500
              }
              Fl_Value_Input ZposText {
                callback {MVC->Goto("Z", o->value());}
                xywh {1015 326 40 24} maximum 500
              }
              Fl_Value_Slider DownstreamMultiplierSlider {
                label {Downstream speed multiplier}
                xywh {730 515 510 25} type {Horz Knob} align 5 minimum 0.01 maximum 25 value 1 textsize 14
              }
              Fl_Value_Slider TempUpdateSpeedSlider {
                label {Temperature update interval}
                callback {MVC->SetTempUpdateSpeed(o->value());}
                xywh {915 390 235 25} type {Horz Knob} align 4 minimum 0.1 maximum 10 step 0.1 value 3 textsize 14
              }
              Fl_Light_Button AutoscrollButton {
                label {Auto scroll}
                xywh {730 560 105 25} value 1 selection_color 2
              }
              Fl_Value_Slider LinesToKeepSlider {
                label {Keep only the last \# lines:}
                callback {MVC->SetKeepLines(o->value());}
                xywh {840 560 400 25} type {Horz Knob} align 5 minimum 100 maximum 100000 step 1 value 1000 textsize 14
              }
              Fl_Light_Button FileLogginEnabledButton {
                label LogFiles
                callback {MVC->SetFileLogging(o->value());}
                xywh {730 590 105 25} value 1 selection_color 2
              }
              Fl_Light_Button ClearLogfilesWhenPrintStartsButton {
                label {Clear logs when print starts}
                callback {MVC->SetLogFileClear(o->value());}
                xywh {840 590 205 25} value 1 selection_color 2
              }
              Fl_Button {} {
                label {Clear logs now}
                callback {MVC->ClearLogs();}
                xywh {1095 590 145 25}
              }
              Fl_Button CustomButton1 {
                label {Custom button 1}
                callback {MVC->SendCustomButton(1);}
                xywh {730 620 250 20}
              }
              Fl_Button CustomButton3 {
                label {Custom button 3}
                callback {MVC->SendCustomButton(3);}
                xywh {730 640 250 20}
              }
              Fl_Button CustomButton2 {
                label {Custom button 2}
                callback {MVC->SendCustomButton(2);}
                xywh {990 620 250 20}
              }
              Fl_Button CustomButton4 {
                label {Custom button 4}
                callback {MVC->SendCustomButton(4);}
                xywh {990 640 250 20}
              }
              Fl_Button CustomButton5 {
                label {Custom button 5}
                callback {MVC->SendCustomButton(5);}
                xywh {730 660 250 20}
              }
              Fl_Button CustomButton7 {
                label {Custom button 7}
                callback {MVC->SendCustomButton(7);}
                xywh {730 680 250 20}
              }
              Fl_Button CustomButton6 {
                label {Custom button 6}
                callback {MVC->SendCustomButton(6);}
                xywh {990 660 250 20}
              }
              Fl_Button CustomButton8 {
                label {Custom button 8}
                callback {MVC->SendCustomButton(8);}
                xywh {990 680 250 20}
              }
              Fl_Button CustomButton9 {
                label {Custom button 9}
                callback {MVC->SendCustomButton(9);}
                xywh {730 700 250 20}
              }
              Fl_Button CustomButton11 {
                label {Custom button 11}
                callback {MVC->SendCustomButton(11);}
                xywh {730 720 250 20}
              }
              Fl_Button CustomButton10 {
                label {Custom button 10}
                callback {MVC->SendCustomButton(10);}
                xywh {990 700 250 20}
              }
              Fl_Button CustomButton12 {
                label {Custom button 12}
                callback {MVC->SendCustomButton(12);}
                xywh {990 720 250 20}
              }
              Fl_Button CustomButton13 {
                label {Custom button 13}
                callback {MVC->SendCustomButton(13);}
                xywh {730 740 250 20}
              }
              Fl_Button CustomButton15 {
                label {Custom button 15}
                callback {MVC->SendCustomButton(15);}
                xywh {730 760 250 20}
              }
              Fl_Button CustomButton14 {
                label {Custom button 14}
                callback {MVC->SendCustomButton(14);}
                xywh {990 740 250 20}
              }
              Fl_Button CustomButton16 {
                label {Custom button 16}
                callback {MVC->SendCustomButton(16);}
                xywh {990 760 250 20}
              }
              Fl_Button CustomButton17 {
                label {Custom button 17}
                callback {MVC->SendCustomButton(17);}
                xywh {730 780 250 20}
              }
              Fl_Button CustomButton18 {
                label {Custom button 18}
                callback {MVC->SendCustomButton(18);}
                xywh {990 780 250 20}
              }
              Fl_Button CustomButton19 {
                label {Custom button 19}
                callback {MVC->SendCustomButton(19);}
                xywh {730 800 250 20}
              }
              Fl_Button CustomButton20 {
                label {Custom button 20}
                callback {MVC->SendCustomButton(20);}
                xywh {990 800 250 20}
              }
              Fl_Light_Button TempReadingEnabledButton {
                label Enable
                callback {MVC->EnableTempReading(o->value());}
                xywh {1160 390 85 25} value 1 selection_color 2
              }
            }
            Fl_Group {} {
              label {Custom buttons} open
              xywh {725 260 540 570} hide
            } {
              Fl_Text_Editor CustomButtonText {
                label {Button gcode}
                xywh {725 335 540 485} selection_color 31
                code0 {Fl_Text_Buffer *CustomButtonBuffer = new Fl_Text_Buffer();}
                code1 {o->buffer(CustomButtonBuffer);}
              }
              Fl_Input CustomButtonLabel {
                label {Button label:}
                xywh {815 291 450 24}
              }
              Fl_Value_Slider CustomButtonSelectorSlider {
                label {Button to edit:}
                callback {MVC->GetCustomButtonText(o->value()-1);}
                xywh {820 260 320 25} type Horizontal align 4 minimum 1 maximum 20 step 1 value 1 textsize 14
              }
              Fl_Button {} {
                label Test
                callback {MVC->TestCustomButton();}
                xywh {1215 260 50 25}
              }
              Fl_Button {} {
                label Save
                callback {MVC->SaveCustomButton();}
                xywh {1145 260 64 25}
              }
              Fl_Light_Button DisplayDebuginFillButton {
                label {Display Debug inFill}
                callback {MVC->SetDisplayDebuginFill(o->value());}
                xywh {805 830 145 0} selection_color 63
              }
              Fl_Light_Button DisplayDebugButton {
                label Debug
                callback {if(o->value())
{
DisplayDebuginFillButton->show();
ExamineSlider->show();
}
else
{
DisplayDebuginFillButton->hide();
ExamineSlider->hide();
}


MVC->redraw();}
                xywh {730 830 70 0} selection_color 63
              }
              Fl_Light_Button DrawVertexNumbersButton {
                label {Draw vertex numbers}
                callback {MVC->SetDrawVertexNumbers(o->value());}
                xywh {955 830 155 0} selection_color 63
              }
              Fl_Light_Button DrawLineNumbersButton {
                label {Draw line numbers}
                callback {MVC->SetDrawLineNumbers(o->value());}
                xywh {1110 830 155 0} selection_color 63
              }
              Fl_Value_Slider ExamineSlider {
                label Examine
                callback {MVC->SetExamine(o->value());}
                xywh {785 825 200 5} type Horizontal align 4 step 0.001 value 0.098 textsize 14
              }
            }
          }
          Fl_Group {} {
            label Print open
            xywh {715 45 540 45} box ENGRAVED_FRAME color 39
          } {
            Fl_Light_Button ConnectToPrinterButton {
              label {Connect to printer}
              callback {MVC->serialConnected();
MVC->ConnectToPrinter(o->value());}
              xywh {720 55 135 25} selection_color 2
            }
            Fl_Light_Button PrintButton {
              label Print
              callback {MVC->PrintButton();}
              xywh {955 55 90 25} selection_color 2
            }
            Fl_Light_Button {} {
              label {Power on}
              callback {MVC->SwitchPower(o->value());}
              xywh {860 55 90 25} selection_color 2
            }
            Fl_Button KickButton {
              label Kick
              callback {MVC->Continue();}
              xywh {1150 55 95 25}
            }
            Fl_Light_Button ContinueButton {
              label Pause
              callback {MVC->ContinuePauseButton();}
              xywh {1050 55 95 25} selection_color 2 deactivate
            }
          }
          Fl_Group {} {
            label Feedback
            xywh {720 155 540 40} box ENGRAVED_FRAME color 39
          } {
            Fl_Light_Button {} {
              label Errors
              callback {MVC->serial.SetDebugMask(DEBUG_ERRORS, (bool)o->value());}
              xywh {730 165 165 20} value 1 selection_color 2
            }
            Fl_Light_Button {} {
              label Info
              callback {MVC->serial.SetDebugMask(DEBUG_INFO, (bool)o->value());}
              xywh {900 165 165 20} value 1 selection_color 2
            }
            Fl_Light_Button {} {
              label Echo
              callback {MVC->serial.SetDebugMask(DEBUG_ECHO, (bool)o->value());}
              xywh {1070 165 165 20} value 1 selection_color 2
            }
          }
          Fl_Group {} {
            label Fan open
            xywh {720 105 540 35} box ENGRAVED_FRAME color 39
          } {
            Fl_Light_Button FanOnButton {
              label {Fan on}
              callback {MVC->SetFan(o->value() ? FanPowerSlider->value() : 0);}
              xywh {725 110 85 25} selection_color 2
            }
            Fl_Value_Slider FanPowerSlider {
              label Voltage
              callback {FanOnButton->value(true);
MVC->SetFan(o->value()*(255.0f/12.0f));}
              xywh {875 110 375 25} type {Horz Knob} align 4 when 4 maximum 12 value 5 textsize 14
            }
          }
          Fl_Input GCodeInput {
            label GCode
            callback {MVC->SendNow(o->value());}
            xywh {775 200 375 25} when 10
          }
          Fl_Return_Button {} {
            label Send
            callback {MVC->SendNow(GCodeInput->value());}
            xywh {1155 200 66 25}
          }
        }
        Fl_Group {} {
          label Lua
          xywh {715 25 545 805} hide resizable
        } {
          Fl_Group {} {
            label {Lua script} open
            xywh {715 45 535 785} box ENGRAVED_FRAME color 39
          } {
            Fl_Text_Editor LuaScriptEditor {
              label {LUA script:}
              xywh {720 80 525 735} align 5
              code0 {Fl_Text_Buffer *luascript = new Fl_Text_Buffer();}
              code1 {o->buffer(luascript);}
            }
            Fl_Button RunLuaButton {
              label Run
              callback {MVC->RunLua(LuaScriptEditor->buffer()->text());}
              xywh {1120 50 125 25}
            }
          }
        }
      }
      Fl_Progress ProgressBar {
        label {Progress:}
        xywh {75 5 635 15} selection_color 63 align 4
      }
    }
  }
  Function {show(int argc, char **argv)} {open
  } {
    code {Fl::visual( FL_DOUBLE | FL_RGB);
Fl::scheme("plastic");
mainWindow->show(argc, argv);
MVC->ReadStl("C:/code/printed-parts/z-tensioner_1off.stl");
MVC->init();
MVC->CopySettingsToGUI();
MVC->draw();
MVC->redraw();
MVC->redraw();} {}
  }
} 

decl {extern GUI* gui;} {} 

Function {TempReadTimer(void *)} {open return_type void
} {
  code {if(gui->TempReadingEnabledButton->value())
{
MVC->serial.SendNow("M105");
Fl::repeat_timeout(MVC->gui ? MVC->ProcessControl.TempUpdateSpeed: 10.0f , &TempReadTimer);
}} {}
} 
