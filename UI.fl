# data file for the Fltk User Interface Designer (fluid)
version 1.0109 
header_name {.h} 
code_name {.cxx}
decl {\#pragma warning( disable : 4311 4312 4244 4267 4800)} {public global
} 

decl {class ModelViewController;} {public global
} 

class GUI {open
} {
  Function {GUI()} {open
  } {
    Fl_Window mainWindow {
      label {RepSnapper by Kulitorum www.kulitorum.com} open
      xywh {217 243 1400 839} type Double box UP_BOX color 0 selection_color 0 labelsize 12 hide resizable
    } {
      Fl_Box MVC {
        label {An instace of ModelViewController}
        xywh {10 20 815 815} box UP_BOX align 16 resizable
        code0 {\#include "StdAfx.h"}
        code1 {\#ifndef M_PI
\#define M_PI 3.14159265358979323846
\#endif}
        class ModelViewController
      }
      Fl_Tabs Tabs {open
        xywh {830 20 565 1070} align 5
      } {
        Fl_Group {} {
          label {Input file} open
          xywh {830 40 545 785} hide
        } {
          Fl_Button {} {
            label {Load STL}
            callback {Fl_File_Chooser chooser("C:/code/printed-parts", "*.stl", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadStl(dir);
MVC->redraw();
};}
            xywh {845 50 145 25}
          }
          Fl_Light_Button FixSTLerrorsButton {
            label {Fix STL errors}
            callback {MVC->redraw()}
            xywh {995 50 135 25} value 1 selection_color 63
          }
          Fl_Button {} {
            label {Save STL}
            callback {Fl_File_Chooser chooser("C:/code/printed-parts", "*.stl", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadStl(dir);
MVC->redraw();
};}
            xywh {845 80 145 25} deactivate
          }
          Fl_Button {} {
            label {Scale model}
            callback {Fl_File_Chooser chooser("C:/code/printed-parts", "*.stl", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadStl(dir);
MVC->redraw();
};}
            xywh {845 110 145 25} deactivate
          }
          Fl_Group {} {
            label {Object rotation} open
            xywh {840 775 535 50} box FLAT_BOX color 39
          } {
            Fl_Button AutoRotateButton {
              label {Auto rotate}
              callback {MVC->OptimizeRotation();
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();}
              xywh {850 785 125 25}
            }
            Fl_Button RotateXButton {
              label {Rotate X}
              callback {MVC->RotateObject(1,0,0, (float)(M_PI/4));
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();}
              xywh {980 785 125 25}
            }
            Fl_Button RotateYButton {
              label {Rotate Y}
              callback {MVC->RotateObject(0,1,0, (float)(M_PI/4));
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();}
              xywh {1110 785 125 25}
            }
            Fl_Button RotateZButton {
              label {Rotate Z}
              callback {MVC->RotateObject(0,0,1, (float)(M_PI/4));
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();}
              xywh {1240 785 125 25}
            }
          }
          Fl_Button {} {
            label {Save settings}
            callback {Fl_Text_Buffer* buffer = GCodeStart->buffer();
char* pText = buffer->text();
MVC->ProcessControl.GCodeStartText = string(pText);
buffer = GCodeLayer->buffer();
pText = buffer->text();
MVC->ProcessControl.GCodeLayerText = string(pText);
buffer = GCodeEnd->buffer();
pText = buffer->text();
MVC->ProcessControl.GCodeEndText = string(pText);
MVC->ProcessControl.SaveXML();}
            xywh {1170 80 185 25}
          }
        }
        Fl_Group {} {
          label {Printer definition} open
          xywh {830 40 545 755} hide
        } {
          Fl_Group {} {
            label {Build volume (mm)} open
            xywh {840 65 230 40} box FLAT_BOX color 39
          } {
            Fl_Value_Input VolumeX {
              label X
              xywh {860 76 45 23} maximum 5000 step 1 value 200
            }
            Fl_Value_Input VolumeY {
              label Y
              xywh {935 76 45 23} maximum 5000 value 200
            }
            Fl_Value_Input VolumeZ {
              label Z
              xywh {1010 76 45 23} maximum 5000 value 140
            }
          }
          Fl_Group {} {
            label {Print margin  (mm)} open
            xywh {1220 65 155 40} box FLAT_BOX color 39
          } {
            Fl_Value_Input MarginX {
              label X
              callback {MVC->SetPrintMargin("X", o->value());}
              xywh {1245 76 45 23} maximum 100 step 1 value 10
            }
            Fl_Value_Input MarginY {
              label Y
              callback {MVC->SetPrintMargin("Y", o->value());}
              xywh {1320 76 45 23} maximum 100 step 1 value 10
            }
          }
          Fl_Group {} {
            label Acceleration open
            xywh {840 530 535 120} box FLAT_BOX color 39
          } {
            Fl_Value_Slider accelerationStepsSlider {
              label {Number of acceleration steps}
              callback {MVC->NumAccelerationSteps(o->value());}
              xywh {850 580 515 20} type {Horz Knob} selection_color 2 align 5 maximum 10 step 1 value 5 textsize 14 deactivate
            }
            Fl_Value_Slider distanceBetweenSpeedStepsSlider {
              label {Distance used to read full speed(mm)}
              callback {MVC->SetDistancePrAccelerationStep(o->value())}
              xywh {850 620 515 20} type {Horz Knob} selection_color 2 align 5 maximum 10 value 0.1 textsize 14
            }
            Fl_Light_Button EnableAccelerationButton {
              label {Enable Acceleration}
              callback {MVC->SetEnableAcceleration(o->value());
if(o->value())
{
accelerationStepsSlider->activate();
distanceBetweenSpeedStepsSlider->activate();
UseFirmwareAccelerationButton->activate();
}
else
{
accelerationStepsSlider->deactivate();
distanceBetweenSpeedStepsSlider->deactivate();
UseFirmwareAccelerationButton->deactivate();
}}
              xywh {850 540 255 20} selection_color 63
            }
            Fl_Light_Button UseFirmwareAccelerationButton {
              label {Use Firmware Acceleration}
              callback {MVC->SetUseFirmwareAcceleration(o->value());

if(o->value())
{
accelerationStepsSlider->deactivate();
distanceBetweenSpeedStepsSlider->label("Distance used to read full speed(mm)");;
}
else
{
accelerationStepsSlider->activate();
distanceBetweenSpeedStepsSlider->label("Distance Pr Acceleration Step (mm)");;
}
accelerationStepsSlider->redraw();
distanceBetweenSpeedStepsSlider->redraw();}
              xywh {1110 540 255 20} selection_color 63
            }
          }
          Fl_Group {} {
            label {Print speeds}
            xywh {840 330 535 170} box FLAT_BOX color 39
          } {
            Fl_Value_Slider MaxPrintSpeedXYSlider {
              label {Max PrintSpeed XY (mm/minute)}
              callback {MVC->SetMaxPrintSpeedXY(o->value());}
              xywh {850 390 515 20} type {Horz Knob} selection_color 2 align 5 maximum 8000 step 100 value 4000 textsize 14
            }
            Fl_Value_Slider MinPrintSpeedZSlider {
              label {Min PrintSpeed Z (mm/minute)}
              callback {MVC->SetMinPrintSpeedZ(o->value());}
              xywh {850 430 515 20} type {Horz Knob} selection_color 2 align 5 minimum 1 maximum 2500 step 10 value 50 textsize 14
            }
            Fl_Value_Slider MinPrintSpeedXYSlider {
              label {Min PrintSpeed XY (mm/minute)}
              callback {MVC->SetMinPrintSpeedXY(o->value());}
              xywh {850 350 515 20} type {Horz Knob} selection_color 2 align 5 maximum 8000 step 100 value 1000 textsize 14
            }
            Fl_Value_Slider MaxPrintSpeedZSlider {
              label {Max PrintSpeed Z (mm/minute)}
              callback {MVC->SetMaxPrintSpeedZ(o->value());}
              xywh {850 470 515 20} type {Horz Knob} selection_color 2 align 5 maximum 2500 step 10 value 150 textsize 14
            }
          }
          Fl_Group {} {
            label Extruder open
            xywh {840 135 535 160} box FLAT_BOX color 39
          } {
            Fl_Value_Slider ExtrudedMaterialWidthSlider {
              label {Extruded material width}
              callback {MVC->SetExtrudedMaterialWidth(o->value());}
              xywh {850 190 515 20} type {Horz Knob} selection_color 2 align 5 maximum 2 value 0.7 textsize 14
            }
            Fl_Value_Slider extrusionFactorSlider {
              label {Extrusion multiplier}
              callback {MVC->SetExtrusionFactor(o->value());}
              xywh {850 230 515 20} type {Horz Knob} selection_color 2 align 5 maximum 2 value 1 textsize 14
            }
            Fl_Light_Button UseIncrementalEcodeButton {
              label {Use incremental ecode (for seperate extruder controller)}
              callback {MVC->SetUseIncrementalEcode(o->value());}
              xywh {850 145 515 20} selection_color 63
            }
            Fl_Value_Slider LayerThicknessSlider {
              label {Layer Thickness}
              callback {MVC->SetLayerThickness(o->value());}
              xywh {850 270 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 3 step 0.1 value 0.4 textsize 14
            }
          }
        }
        Fl_Group {} {
          label Infill
          xywh {830 40 545 755} hide
        } {
          Fl_Group {} {
            label Infill open
            xywh {840 65 535 215} box FLAT_BOX color 39
          } {
            Fl_Value_Slider InfillRotationSlider {
              label Rotation
              callback {MVC->SetInfillRotation(o->value());}
              xywh {850 125 515 20} type {Horz Knob} selection_color 2 align 5 maximum 360 step 1 value 45 textsize 14
            }
            Fl_Value_Slider InfillRotationPrLayerSlider {
              label {InFill Rotation pr. Layer}
              callback {MVC->SetInfillRotationPrLayer(o->value());}
              xywh {850 165 515 20} type {Horz Knob} selection_color 2 align 5 maximum 360 step 1 value 90 textsize 14
            }
            Fl_Value_Slider InfillDistanceSlider {
              label {Infill Distance}
              callback {MVC->SetInfillDistance(o->value());}
              xywh {850 205 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 10 step 0.1 value 2 textsize 14
            }
            Fl_Value_Slider OptimizationSlider {
              label Optimize
              callback {MVC->SetOptimization(o->value());}
              xywh {850 250 515 20} type {Horz Knob} selection_color 2 align 5 value 0.01 textsize 14
            }
            Fl_Light_Button ShellOnlyButton {
              label {Shell Only - no infill}
              callback {MVC->SetShellOnly(o->value());}
              xywh {850 85 255 20} selection_color 63
            }
            Fl_Value_Slider ShellCountSlider {
              label {Shell count}
              callback {MVC->SetShellCount(o->value());}
              xywh {1110 85 255 20} type {Horz Knob} selection_color 2 align 5 minimum 1 maximum 10 step 1 value 1 textsize 14
            }
          }
        }
        Fl_Group {} {
          label Apron
          xywh {830 40 545 755} color 47 hide
        } {
          Fl_Group {} {
            label Size open
            xywh {840 65 530 305} box FLAT_BOX color 39
          } {
            Fl_Value_Slider ApronSizeSlider {
              label Size
              callback {MVC->SetApronSize(o->value());}
              tooltip {How much larget then the print should the Raft be.} xywh {850 125 510 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 2 step 0.1 value 1.3 textsize 14 deactivate
            }
            Fl_Value_Slider ApronCoverageXSlider {
              label {Coverage X axis}
              callback {MVC->SetApronCoverageX(o->value());}
              xywh {850 205 510 20} type {Horz Knob} selection_color 2 align 5 minimum 1 maximum 100 step 1 value 30 textsize 14 deactivate
            }
            Fl_Value_Slider ApronHeightSlider {
              label Height
              callback {MVC->SetApronHeight(o->value());}
              xywh {850 165 510 20} type {Horz Knob} selection_color 2 align 5 minimum 1 maximum 30 step 1 value 8 textsize 14 deactivate
            }
            Fl_Value_Slider ApronCoverageYSlider {
              label {Coverage Y axis}
              callback {MVC->SetApronCoverageY(o->value());}
              xywh {850 245 510 20} type {Horz Knob} selection_color 2 align 5 minimum 1 maximum 100 step 1 value 30 textsize 14 deactivate
            }
            Fl_Light_Button ApronEnableButton {
              label Enable
              callback {MVC->SetApronEnable(o->value());}
              xywh {850 85 250 20}
            }
            Fl_Value_Slider ApronDistanceToObjectSlider {
              label {Distance to object}
              callback {MVC->SetApronDistanceToObject(o->value());}
              xywh {850 285 510 20} type {Horz Knob} selection_color 2 align 5 minimum -1 maximum 3 step 0.1 value 0.5 textsize 14 deactivate
            }
            Fl_Value_Slider ApronInfillDistanceSlider {
              label {Infill Distance}
              callback {MVC->SetApronInfillDistance(o->value());}
              xywh {850 325 510 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 10 step 0.1 value 2 textsize 14 deactivate
            }
            Fl_Light_Button ApronPreviewButton {
              label Preview
              callback {MVC->SetApronPreview(o->value());}
              xywh {1105 85 255 20} deactivate
            }
          }
        }
        Fl_Group {} {
          label Raft
          xywh {830 40 545 765} color 47 hide
        } {
          Fl_Group {} {
            label Base open
            xywh {835 220 535 270} box FLAT_BOX color 39
          } {
            Fl_Value_Slider RaftMaterialPrDistanceRatioSlider {
              label {Material pr. distance ratio}
              callback {MVC->SetRaftMaterialPrDistanceRatio(o->value());}
              xywh {845 285 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 3 step 0.1 value 1.75 textsize 14
            }
            Fl_Value_Slider RaftRotationSlider {
              label Rotation
              callback {MVC->SetRaftRotation(o->value());}
              xywh {845 325 515 20} type {Horz Knob} selection_color 2 align 5 maximum 360 step 1 value 90 textsize 14
            }
            Fl_Value_Slider RaftBaseDistanceSlider {
              label {Distance between lines}
              callback {MVC->SetRaftBaseDistance(o->value());}
              tooltip {Distance between the base layer's lines} xywh {845 370 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 10 step 0.1 value 2 textsize 14
            }
            Fl_Value_Slider RaftBaseThicknessSlider {
              label {Thinkness ratio}
              callback {MVC->SetRaftBaseThickness(o->value());}
              tooltip {How much thicker or thinner then a normal layer should the raft base be.} xywh {845 415 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 3 step 0.1 value 1 textsize 14
            }
            Fl_Value_Slider RaftBaseLayerCountSlider {
              label {Number of Base layers}
              callback {MVC->SetRaftBaseLayerCount(o->value());}
              xywh {845 245 515 20} type {Horz Knob} selection_color 2 align 5 maximum 5 step 1 value 1 textsize 14
            }
            Fl_Value_Slider RaftBaseTemperatureSlider {
              label {Temperature ratio}
              callback {MVC->SetRaftBaseTemperature(o->value());}
              tooltip {To make the flow better, you may want to print the base layers hotter then the rest of the print.} xywh {845 460 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 3 value 1.1 textsize 14
            }
          }
          Fl_Group {} {
            label Size open
            xywh {835 145 535 55} box FLAT_BOX color 39
          } {
            Fl_Value_Slider RaftSizeSlider {
              label Size
              callback {MVC->SetRaftSize(o->value());}
              tooltip {How much larget then the print should the Raft be.} xywh {845 170 515 20} type {Horz Knob} selection_color 2 align 5 minimum 1 maximum 3 value 1.33 textsize 14
            }
          }
          Fl_Group {} {
            label Interface open
            tooltip {This is the layer(s) connecting to the print itself. Unlike the Base layer, they should be "nice" and with a normal extrusion ratio.} xywh {835 520 535 285} box FLAT_BOX color 39
          } {
            Fl_Value_Slider RaftInterfaceMaterialPrDistanceRatioSlider {
              label {Material pr. distance ratio}
              callback {MVC->SetRaftInterfaceMaterialPrDistanceRatio(o->value());}
              xywh {845 595 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 3 step 0.1 value 1 textsize 14
            }
            Fl_Value_Slider RaftRotationPrLayerSlider {
              label {Rotation pr. layer}
              callback {MVC->SetRaftRotationPrLayer(o->value());}
              xywh {845 640 515 20} type {Horz Knob} selection_color 2 align 5 maximum 360 step 1 value 90 textsize 14
            }
            Fl_Value_Slider RaftInterfaceDistanceSlider {
              label {Distance between lines}
              callback {MVC->SetRaftInterfaceDistance(o->value());}
              tooltip {Distance between the base layer's lines} xywh {845 685 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 10 step 0.1 value 2 textsize 14
            }
            Fl_Value_Slider RaftInterfaceThicknessSlider {
              label {Thinkness ratio}
              callback {MVC->SetRaftBaseThickness(o->value());}
              tooltip {How much thicker or thinner then a normal layer should the raft base be.} xywh {845 730 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 3 step 0.1 value 1 textsize 14
            }
            Fl_Value_Slider RaftInterfaceLayerCountSlider {
              label {Number of interface layers}
              callback {MVC->SeRaftInterfaceLayerCount(o->value());}
              xywh {845 550 515 20} type {Horz Knob} selection_color 2 align 5 maximum 5 step 1 value 2 textsize 14
            }
            Fl_Value_Slider RaftInterfaceTemperatureSlider {
              label {Temperature ratio}
              callback {MVC->SetRaftInterfaceTemperature(o->value());}
              tooltip {To make the flow better, you may want to print the base layers hotter then the rest of the print.} xywh {845 775 515 20} type {Horz Knob} selection_color 2 align 5 minimum 0.1 maximum 3 value 1.1 textsize 14
            }
          }
          Fl_Group {} {
            label Size open
            xywh {835 60 535 55} box FLAT_BOX color 39
          } {
            Fl_Light_Button RaftEnableButton {
              label Enable
              callback {MVC->SetRaftEnable(o->value());}
              xywh {840 80 255 25}
            }
            Fl_Light_Button {} {
              label Preview
              callback {MVC->SetApronPreview(o->value());}
              xywh {1100 80 255 25} deactivate
            }
          }
        }
        Fl_Group {} {
          label GCode
          xywh {830 40 545 755} hide
        } {
          Fl_Button {} {
            label {Load Gcode}
            callback {Fl_File_Chooser chooser("\\\\", "*.gcode", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadGCode(dir);
MVC->redraw();
};}
            xywh {835 90 145 25}
            code0 {\#include <FL/Fl_File_Chooser.H>}
          }
          Fl_Output GCodeLengthText {
            xywh {985 91 225 24}
          }
          Fl_Button {} {
            label {Convert to GCode}
            callback {MVC->ConvertToGCode();}
            xywh {835 60 145 25}
          }
          Fl_Tabs {} {open
            xywh {830 120 545 675}
          } {
            Fl_Group {} {
              label {Start code} open
              xywh {830 140 545 655}
            } {
              Fl_Text_Editor GCodeStart {
                xywh {830 140 530 605}
                code0 {Fl_Text_Buffer *startbuff = new Fl_Text_Buffer();}
                code1 {o->buffer(startbuff);}
              }
              Fl_Choice {} {
                label {Printer definition} open
                xywh {955 750 75 15} down_box BORDER_BOX
              } {
                MenuItem MinSpeedXY {
                  label {Min PrintSpeed XY}
                  xywh {0 0 34 24}
                }
                MenuItem {} {
                  label {Max PrintSpeed XY}
                  xywh {0 0 34 24}
                }
                MenuItem {} {
                  label {Min PrintSpeed Z}
                  xywh {0 0 34 24}
                }
                MenuItem {} {
                  label {Max PrintSpeed Z}
                  xywh {0 0 34 24}
                }
              }
            }
            Fl_Text_Editor GCodeLayer {
              label {Next layer}
              xywh {830 140 530 655} hide
              code0 {Fl_Text_Buffer *layerbuff = new Fl_Text_Buffer();}
              code1 {o->buffer(layerbuff);}
            }
            Fl_Text_Editor GCodeEnd {
              label {End code}
              xywh {830 140 530 655} hide
              code0 {Fl_Text_Buffer *endbuff = new Fl_Text_Buffer();}
              code1 {o->buffer(endbuff);}
            }
            Fl_Text_Editor GCodeResult {
              label Result
              xywh {830 140 530 655} hide
              code0 {Fl_Text_Buffer *resultbuff = new Fl_Text_Buffer();}
              code1 {o->buffer(resultbuff);}
            }
          }
          Fl_Button {} {
            label {Save Gcode}
            callback {Fl_File_Chooser chooser("\\\\", "*.gcode", Fl_File_Chooser::CREATE, "Choose filename");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
Fl_Text_Buffer *buffer = GCodeResult->buffer();

int result = buffer->savefile(chooser.value());

switch(result)
{
case 0:	// Succes
break;
case 1:	//Open for write failed
fl_alert("Error saving GCode file, error creating file.", "OK");
break;
case 2: // Partially saved file
fl_alert("Error saving GCode file, while writing file, is the disk full?.", "OK");
break;
}

MVC->redraw();
};}
            xywh {1215 90 145 25}
            code0 {\#include <FL/Fl_File_Chooser.H>}
          }
        }
        Fl_Group {} {
          label Score
          xywh {830 40 545 795} hide
        } {
          Fl_Button {} {
            label {Placeholder and reminder for antomatic Score'ing of objects (see todo folder)}
            xywh {840 65 535 140}
          }
          Fl_Button {} {
            label {Make custom buttons where you can store GCODE and run at will}
            xywh {840 245 535 30}
          }
          Fl_Button {} {
            label {Add variables to start, layer and end gcode}
            xywh {840 315 535 30}
          }
          Fl_Button {} {
            label {Avoid voids when moving - pathfinding}
            xywh {840 350 535 30}
          }
          Fl_Button {} {
            label {Sliders to move head interactivily}
            xywh {840 385 535 30}
          }
          Fl_Button {} {
            label {Type input where you can send gcode interactivly}
            xywh {840 210 535 30}
          }
          Fl_Button {} {
            label {Temperature reading}
            xywh {840 280 535 30}
          }
          Fl_Button {} {
            label {Speed input and interactive start/stop of extruder}
            xywh {840 420 535 30}
          }
          Fl_Button {} {
            label {Fix shrink code}
            xywh {840 455 535 30}
          }
          Fl_Button {} {
            label {Fix printing of objects where the called-for thickness of the part is less than twice the filament extrusion. - with one line only}
            xywh {840 490 535 50}
          }
          Fl_Text_Editor NotesEditor {
            label Notes
            xywh {840 560 535 275}
            code0 {Fl_Text_Buffer *NotesBuff = new Fl_Text_Buffer();}
            code1 {o->buffer(NotesBuff);}
          }
        }
        Fl_Group {} {
          label Rendering
          xywh {830 40 545 755} color 47 hide
        } {
          Fl_Group {} {
            label {STL rendering}
            xywh {835 70 535 280} box FLAT_BOX color 39
          } {
            Fl_Light_Button DisplayPolygonsButton {
              label {Display Polygons}
              callback {MVC->SetDisplayPolygons(o->value());}
              xywh {870 80 220 20} value 1 selection_color 63
            }
            Fl_Light_Button DisplayWireframeButton {
              label {Display Wireframe}
              callback {MVC->SetDisplayWireframe(o->value());}
              xywh {1135 80 140 20} selection_color 63
            }
            Fl_Light_Button DisplayNormalsButton {
              label {Display Normals}
              callback {MVC->SetDisplayNormals(o->value());}
              xywh {870 180 220 20} selection_color 63
            }
            Fl_Light_Button DisplayEndpointsButton {
              label {Display Endpoints}
              callback {MVC->SetDisplayEndpoints(o->value());}
              xywh {1135 180 220 20} selection_color 63
            }
            Fl_Value_Slider PolygonValSlider {
              label Val
              callback {MVC->SetPolygonVal(o->value());
MVC->redraw();}
              xywh {870 145 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider PolygonSatSlider {
              label Sat
              callback {MVC->SetPolygonSat(o->value());
MVC->redraw();}
              xywh {870 125 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider PolygonHueSlider {
              label Hue
              callback {MVC->SetPolygonHue(o->value());
MVC->redraw();}
              xywh {870 105 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider WireframeValSlider {
              label Val
              callback {MVC->SetWireframeVal(o->value());
MVC->redraw();}
              xywh {1135 145 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider WireframeSatSlider {
              label Sat
              callback {MVC->SetWireframeSat(o->value());
MVC->redraw();}
              xywh {1135 125 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider WireframeHueSlider {
              label Hue
              callback {MVC->SetWireframeHue(o->value());
MVC->redraw();}
              xywh {1135 105 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider NormalValSlider {
              label Val
              callback {MVC->SetNormalsVal(o->value());
MVC->redraw();}
              xywh {870 245 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider NormalSatSlider {
              label Sat
              callback {MVC->SetNormalsSat(o->value());
MVC->redraw();}
              xywh {870 225 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider NormalHueSlider {
              label Hue
              callback {MVC->SetNormalsHue(o->value());
MVC->redraw();}
              xywh {870 205 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider EndpointValSlider {
              label Val
              callback {MVC->SetEndpointsVal(o->value());
MVC->redraw();}
              xywh {1135 245 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider EndpointSatSlider {
              label Sat
              callback {MVC->SetEndpointsSat(o->value());
MVC->redraw();}
              xywh {1135 225 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider EndpointHueSlider {
              label Hue
              callback {MVC->SetEndpointsHue(o->value());
MVC->redraw();}
              xywh {1135 205 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Light_Button DisplayBBoxButton {
              label {Display Bounding Box}
              callback {MVC->SetDisplayBBox(o->value());}
              xywh {870 325 220 20} selection_color 63
            }
            Fl_Value_Slider HighlightSlider {
              label Highlight
              callback {MVC->SetHighlight(o->value());
MVC->redraw();}
              xywh {1135 325 220 20} type {Horz Knob} selection_color 2 align 5 value 0.5 textsize 14
            }
            Fl_Value_Slider NormalLengthSlider {
              label {Normals length}
              callback {MVC->SetNormalsLength(o->value());
MVC->redraw();}
              xywh {870 285 220 20} type {Horz Knob} selection_color 2 align 5 minimum 1 maximum 30 step 0.1 value 10 textsize 14
            }
            Fl_Value_Slider EndpointSizeSlider {
              label {Endpoints size}
              callback {MVC->SetEndPointSize(o->value());
MVC->redraw();}
              xywh {1135 285 220 20} type {Horz Knob} selection_color 2 align 5 minimum 1 maximum 20 step 0.1 value 8 textsize 14
            }
            Fl_Light_Button DisplayWireframeShadedButton {
              label Shaded
              callback {MVC->SetDisplayWireframeShaded(o->value());}
              xywh {1280 80 75 20} selection_color 63
            }
          }
          Fl_Group {} {
            label {GCode rendering} open
            xywh {835 370 535 185} box FLAT_BOX color 39
          } {
            Fl_Light_Button DisplayGCodeButton {
              label {Display GCode}
              callback {MVC->SetDisplayGCode(o->value());
MVC->redraw();}
              xywh {870 380 220 20} value 1 selection_color 63
            }
            Fl_Value_Slider GCodeExtrudeValSlider {
              label Val
              callback {MVC->SetGCodeExtrudeVal(o->value());
MVC->redraw();}
              xywh {870 445 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider GCodeExtrudeSatSlider {
              label Sat
              callback {MVC->SetGCodeExtrudeSat(o->value());
MVC->redraw();}
              xywh {870 425 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider GCodeExtrudeHueSlider {
              label Hue
              callback {MVC->SetGCodeExtrudeHue(o->value());
MVC->redraw();}
              xywh {870 405 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Light_Button LuminanceShowsSpeedButton {
              label {Luminance shows speed}
              callback {MVC->SetLuminanceShowsSpeed(o->value());
MVC->redraw();}
              xywh {1135 380 220 20} value 1 selection_color 63
            }
            Fl_Button {} {
              label {Crop Range}
              callback {float start = GCodeDrawStartSlider->value();
float end = GCodeDrawEndSlider->value();
GCodeDrawStartSlider->range(start,end);
GCodeDrawEndSlider->range(start,end);
GCodeDrawStartSlider->redraw();
GCodeDrawEndSlider->redraw();}
              xywh {870 520 220 20}
            }
            Fl_Button {} {
              label {Reset crop range}
              callback {GCodeDrawStartSlider->range(0,1);
GCodeDrawEndSlider->range(0,1);
GCodeDrawStartSlider->redraw();
GCodeDrawEndSlider->redraw();}
              xywh {1140 520 220 20}
            }
            Fl_Slider GCodeDrawStartSlider {
              label From
              callback {MVC->SetGCodeDrawStart(o->value());}
              xywh {870 470 490 20} type Horizontal color 39 selection_color 2 align 4
            }
            Fl_Slider GCodeDrawEndSlider {
              label To
              callback {MVC->SetGCodeDrawEnd(o->value());}
              xywh {870 495 490 20} type Horizontal color 39 selection_color 2 align 4
            }
            Fl_Value_Slider GCodeMoveValSlider {
              label Val
              callback {MVC->SetGCodeMoveVal(o->value());
MVC->redraw();}
              xywh {1135 445 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider GCodeMoveSatSlider {
              label Sat
              callback {MVC->SetGCodeMoveSat(o->value());
MVC->redraw();}
              xywh {1135 425 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider GCodeMoveHueSlider {
              label Hue
              callback {MVC->SetGCodeMoveHue(o->value());
MVC->redraw();}
              xywh {1135 405 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
          }
          Fl_Group {} {
            label {Layer preview} open
            xywh {835 585 540 90} box FLAT_BOX color 39
          } {
            Fl_Value_Slider CuttingPlaneValueSlider {
              label Cuttingplane
              callback {MVC->SetCuttingPlaneValue(o->value());}
              xywh {845 645 515 20} type {Horz Knob} align 5 value 0.5 textsize 14
            }
            Fl_Light_Button DisplayCuttingPlaneButton {
              label {Display CuttingPlane}
              callback {MVC->SetDisplayCuttingPlane(o->value());}
              xywh {845 600 170 20} selection_color 63
            }
            Fl_Light_Button DisplayinFillButton {
              label {Display inFill}
              callback {MVC->SetDisplayinFill(o->value());}
              xywh {1020 600 165 20} selection_color 63
            }
            Fl_Light_Button DisplayAllLayersButton {
              label {Display all layers}
              callback {MVC->SetDisplayAllLayers(o->value());}
              xywh {1190 600 170 20} selection_color 63
            }
          }
          Fl_Group {} {
            label Lights open
            xywh {835 710 540 70} box FLAT_BOX color 39
          } {
            Fl_Light_Button {} {
              label {Enable light 0}
              callback {MVC->SetEnableLight(0, o->value());}
              xywh {845 725 120 20} value 1 selection_color 63
            }
            Fl_Light_Button {} {
              label {Enable light 1}
              callback {MVC->SetEnableLight(1, o->value());}
              xywh {845 750 120 20} selection_color 63
            }
            Fl_Light_Button {} {
              label {Enable light 2}
              callback {MVC->SetEnableLight(2, o->value());}
              xywh {1105 725 120 20} selection_color 63
            }
            Fl_Light_Button {} {
              label {Enable light 3}
              callback {MVC->SetEnableLight(3, o->value());}
              xywh {1105 750 120 20} value 1 selection_color 63
            }
            Fl_Button {} {
              label {Edit light 0}
              xywh {970 725 130 20} deactivate
            }
            Fl_Button {} {
              label {Edit light 1}
              xywh {970 750 130 20} deactivate
            }
            Fl_Button {} {
              label {Edit light 2}
              xywh {1230 725 130 20} deactivate
            }
            Fl_Button {} {
              label {Edit light 3}
              xywh {1230 750 130 20} deactivate
            }
          }
        }
        Fl_Group {} {
          label Print open
          xywh {830 45 565 1045} color 47
        } {
          Fl_Tabs {} {open
            xywh {835 180 540 660}
          } {
            Fl_Browser CommunationLog {
              label {Communication log}
              xywh {840 205 530 630} hide
              code0 {\#include <FL/Fl_Multi_Browser.H>}
              class Fl_Multi_Browser
            }
            Fl_Browser ErrorLog {
              label {Errors / warnings}
              xywh {840 205 530 630} hide
              code0 {\#include <FL/Fl_Multi_Browser.H>}
              class Fl_Multi_Browser
            }
            Fl_Browser Echo {
              label Echo
              xywh {840 205 530 630}
              code0 {\#include <FL/Fl_Multi_Browser.H>}
              class Fl_Multi_Browser
            }
            Fl_Group {} {
              label {Interactive control} open
              xywh {840 205 535 635} selection_color 15 hide
            } {
              Fl_Light_Button SwitchHeatOnButton {
                label {Switch heat on}
                callback {MVC->SwitchHeat(o->value(), TargetTempText->value());}
                xywh {845 395 220 25}
              }
              Fl_Value_Input TargetTempText {
                label {Target temp}
                callback {MVC->SetTargetTemp(o->value());}
                xywh {1300 396 55 24} maximum 300 value 63
              }
              Fl_Light_Button RunExtruderButton {
                label {Run extruder}
                callback {MVC->RunExtruder();}
                xywh {845 425 115 25}
              }
              Fl_Light_Button SetExtruderDirectionButton {
                label Reverse
                callback {MVC->SetExtruderDirection(o->value());}
                xywh {965 425 100 25}
              }
              Fl_Button {} {
                label Home
                callback {MVC->Home("X");}
                xywh {855 215 83 25}
              }
              Fl_Button {} {
                label Home
                callback {MVC->Home("Y");}
                xywh {855 245 83 25}
              }
              Fl_Button {} {
                label Home
                callback {MVC->Home("Z");}
                xywh {855 275 83 25}
              }
              Fl_Button {} {
                label {Find position in Gcode}
                xywh {1175 305 173 25} deactivate
              }
              Fl_Value_Slider {} {
                label Speed
                callback {MVC->SetExtruderSpeed(o->value());}
                xywh {1120 425 235 25} type {Horz Knob} align 4 minimum 100 maximum 9999 step 100 value 3000 textsize 14
              }
              Fl_Value_Slider {} {
                label Length
                callback {MVC->SetExtruderLength(o->value());}
                xywh {1120 455 235 25} type {Horz Knob} align 4 minimum 10 maximum 850 step 100 value 150 textsize 14
              }
              Fl_Input GCodeInput {
                label GCode
                xywh {895 350 385 25}
              }
              Fl_Button {} {
                label Send
                callback {MVC->SendNow(GCodeInput->value());}
                xywh {1285 350 68 25}
              }
              Fl_Output CurrentTempText {
                label {Current temp}
                xywh {1160 396 55 24}
              }
              Fl_Value_Slider ExamineSlider {
                label Examine
                callback {MVC->SetExamine(o->value());}
                xywh {900 820 200 20} type Horizontal align 4 step 0.001 value 0.098 textsize 14
              }
              Fl_Light_Button DisplayDebuginFillButton {
                label {Display Debug inFill}
                callback {MVC->SetDisplayDebuginFill(o->value());}
                xywh {915 820 145 20} selection_color 63
              }
              Fl_Light_Button DisplayDebugButton {
                label Debug
                callback {if(o->value())
{
DisplayDebuginFillButton->show();
ExamineSlider->show();
}
else
{
DisplayDebuginFillButton->hide();
ExamineSlider->hide();
}


MVC->redraw();}
                xywh {840 820 70 20} selection_color 63
              }
              Fl_Light_Button DrawVertexNumbersButton {
                label {Draw vertex numbers}
                callback {MVC->SetDrawVertexNumbers(o->value());}
                xywh {1065 820 155 20} selection_color 63
              }
              Fl_Light_Button DrawLineNumbersButton {
                label {Draw line numbers}
                callback {MVC->SetDrawLineNumbers(o->value());}
                xywh {1220 820 155 20} selection_color 63
              }
              Fl_Button {} {
                label {Home all}
                callback {MVC->Home("ALL");}
                xywh {855 305 85 25}
              }
              Fl_Button {} {
                label {-10}
                callback {MVC->Move("X", -10);}
                xywh {995 215 40 25}
              }
              Fl_Button {} {
                label {-1}
                callback {MVC->Move("X", -1);}
                xywh {1040 215 40 25}
              }
              Fl_Button {} {
                label {-0.1}
                callback {MVC->Move("X", -0.1f);}
                xywh {1085 215 40 25}
              }
              Fl_Button {} {
                label {+0.1}
                callback {MVC->Move("X", 0.1f);}
                xywh {1175 215 40 25}
              }
              Fl_Button {} {
                label {+1}
                callback {MVC->Move("X", 1);}
                xywh {1220 215 40 25}
              }
              Fl_Button {} {
                label {+10}
                callback {MVC->Move("X", 10);}
                xywh {1265 215 40 25}
              }
              Fl_Button {} {
                label {-100}
                callback {MVC->Move("X", -100);}
                xywh {950 215 40 25}
              }
              Fl_Button {} {
                label {+100}
                callback {MVC->Move("X", 100);}
                xywh {1310 215 40 25}
              }
              Fl_Button {} {
                label {-10}
                callback {MVC->Move("Y", -10);}
                xywh {995 245 40 25}
              }
              Fl_Button {} {
                label {-1}
                callback {MVC->Move("Y", -1);}
                xywh {1040 245 40 25}
              }
              Fl_Button {} {
                label {-0.1}
                callback {MVC->Move("Y", -0.1f);}
                xywh {1085 245 40 25}
              }
              Fl_Button {} {
                label {+0.1}
                callback {MVC->Move("Y", 0.1f);}
                xywh {1175 245 40 25}
              }
              Fl_Button {} {
                label {+1}
                callback {MVC->Move("Y", 1);}
                xywh {1220 245 40 25}
              }
              Fl_Button {} {
                label {+10}
                callback {MVC->Move("Y", 10);}
                xywh {1265 245 40 25}
              }
              Fl_Button {} {
                label {-100}
                callback {MVC->Move("Y", -100);}
                xywh {950 245 40 25}
              }
              Fl_Button {} {
                label {+100}
                callback {MVC->Move("Y", 100);}
                xywh {1310 245 40 25}
              }
              Fl_Button {} {
                label {-10}
                callback {MVC->Move("Z", -10);}
                xywh {995 275 40 25}
              }
              Fl_Button {} {
                label {-1}
                callback {MVC->Move("Z", -1);}
                xywh {1040 275 40 25}
              }
              Fl_Button {} {
                label {-0.1}
                callback {MVC->Move("Z", -0.1f);}
                xywh {1085 275 40 25}
              }
              Fl_Button {} {
                label {+0.1}
                callback {MVC->Move("Z", 0.1f);}
                xywh {1175 275 40 25}
              }
              Fl_Button {} {
                label {+1}
                callback {MVC->Move("Z", 1);}
                xywh {1220 275 40 25}
              }
              Fl_Button {} {
                label {+10}
                callback {MVC->Move("Z", 10);}
                xywh {1265 275 40 25}
              }
              Fl_Button {} {
                label {-100}
                callback {MVC->Move("Z", -100);}
                xywh {950 275 40 25}
              }
              Fl_Button {} {
                label {+100}
                callback {MVC->Move("Z", 100);}
                xywh {1310 275 40 25}
              }
              Fl_Value_Input XposText {
                callback {MVC->Goto("X", o->value());}
                xywh {1130 216 40 24} maximum 500
              }
              Fl_Value_Input YposText {
                callback {MVC->Goto("Y", o->value());}
                xywh {1130 246 40 24} maximum 500
              }
              Fl_Value_Input ZposText {
                callback {MVC->Goto("Z", o->value());}
                xywh {1130 276 40 24} maximum 500
              }
              Fl_Button {} {
                label {STOP !!!!}
                callback {MVC->STOP();}
                xywh {855 530 495 230} color 1 labelfont 1 labelsize 64 labelcolor 1
              }
              Fl_Value_Slider DownstreamMultiplierSlider {
                label {Downstream speed multiplier}
                xywh {845 490 510 25} type {Horz Knob} align 5 minimum 0.01 maximum 5 value 1 textsize 14
              }
            }
          }
          Fl_Group {} {
            label Print open
            xywh {835 65 540 45} box FLAT_BOX color 39
          } {
            Fl_Light_Button ConnectToPrinterButton {
              label {Connect to printer}
              callback {MVC->ConnectToPrinter(o->value());}
              xywh {840 75 165 25} selection_color 2
            }
            Fl_Light_Button PrintButton {
              label Print
              callback {if(o->value())
{
o->label("Pause");
MVC->Print();
}
else
{
MVC->Print();
o->label("Print");
}}
              xywh {1010 75 165 25} selection_color 2
            }
            Fl_Button {} {
              label Nudge
              callback {MVC->Continue();}
              xywh {1180 75 165 25}
            }
          }
          Fl_Group {} {
            label Feedback open
            xywh {835 130 540 45} box FLAT_BOX color 39
          } {
            Fl_Light_Button {} {
              label Errors
              callback {MVC->serial.SetDebugMask(DEBUG_ERRORS, (bool)o->value());}
              xywh {845 140 165 25} value 1 selection_color 2
            }
            Fl_Light_Button {} {
              label Info
              callback {MVC->serial.SetDebugMask(DEBUG_INFO, (bool)o->value());}
              xywh {1015 140 165 25} value 1 selection_color 2
            }
            Fl_Light_Button {} {
              label Echo
              callback {MVC->serial.SetDebugMask(DEBUG_ECHO, (bool)o->value());}
              xywh {1185 140 165 25} value 1 selection_color 2
            }
          }
          Fl_Light_Button AutoscrollButton {
            label {Auto scroll} selected
            xywh {1270 180 105 25} value 1 selection_color 2
          }
        }
      }
      Fl_Progress ProgressBar {
        label {Progress:}
        xywh {75 5 1300 15} selection_color 63 align 4
      }
    }
  }
  Function {show(int argc, char **argv)} {open
  } {
    code {Fl::visual( FL_DOUBLE | FL_RGB);
Fl::scheme("plastic");
mainWindow->show(argc, argv);
//MVC->ReadStl("C:/box.stl");
MVC->init();
//MVC->ReadStl("C:/\#Downloads/Reprap Exchange/N_DSL-Stylus.stl");
MVC->ReadStl("C:/code/printed-parts/\#poly.stl");
MVC->ReadStl("C:/code/printed-parts/\#dims.stl");
MVC->CopySettingsToGUI();
MVC->draw();
MVC->redraw();
MVC->redraw();} {}
  }
} 

decl {extern GUI* gui;} {} 

Function {TempReadTimer(void *)} {open return_type void
} {
  code {gui->MVC->serial.SendNow("M105");
Fl::repeat_timeout(10.0f, &TempReadTimer);} {}
} 
