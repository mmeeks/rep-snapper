# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
header_name {.h} 
code_name {.cxx}
decl {class ModelViewController;} {public global
} 

class GUI {open
} {
  Function {GUI()} {open
  } {
    Fl_Window mainWindow {
      label CubeView open
      xywh {40 40 1354 809} type Double box UP_BOX labelsize 12 hide resizable
    } {
      Fl_Box MVC {
        label {An instace of ModelViewController}
        xywh {5 5 800 800} box UP_BOX align 16
        code0 {\#include "StdAfx.h"}
        code1 {\#ifndef M_PI
\#define M_PI 3.14159265358979323846
\#endif}
        class ModelViewController
      }
      Fl_Tabs Tabs {
        label {Process:} open
        xywh {810 20 540 785} align 5
      } {
        Fl_Group {} {
          label {Input file}
          xywh {810 40 540 765} hide
        } {
          Fl_Button {} {
            label {Load STL}
            callback {Fl_File_Chooser chooser("C:/code/printed-parts", "*.stl", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadStl(dir);
MVC->redraw();
};}
            xywh {815 50 145 25}
          }
          Fl_Light_Button FixSTLerrorsButton {
            label {Fix STL errors}
            callback {MVC->redraw()}
            xywh {965 50 135 25} value 1 selection_color 63
          }
          Fl_Button AutoRotateButton {
            label {Auto rotate}
            callback {MVC->OptimizeRotation();
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();}
            xywh {815 250 90 25}
          }
          Fl_Button RotateXButton {
            label {Rotate X}
            callback {MVC->RotateObject(1,0,0, M_PI/4);
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();}
            xywh {910 250 90 25}
          }
          Fl_Button RotateYButton {
            label {Rotate Y}
            callback {MVC->RotateObject(0,1,0, M_PI/4);
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();}
            xywh {1005 250 90 25}
          }
          Fl_Button RotateZButton {
            label {Rotate Z}
            callback {MVC->RotateObject(0,0,1, M_PI/4);
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();}
            xywh {1100 250 90 25}
          }
          Fl_Value_Slider PolygonOpasitySlider {
            label {Polygon opasity}
            callback {MVC->SetPolygonOpasity(o->value());}
            xywh {815 360 375 20} type Horizontal align 5 value 0.3 textsize 14
          }
          Fl_Light_Button DisplayPolygonsButton {
            label {Display Polygons}
            callback {MVC->SetDisplayPolygons(o->value());}
            xywh {815 280 185 25} selection_color 63
          }
          Fl_Light_Button DisplayWireframeButton {
            label {Display Wireframe}
            callback {MVC->SetDisplayWireframe(o->value());}
            xywh {815 310 185 25} selection_color 63
          }
          Fl_Light_Button DisplayNormalsButton {
            label {Display Normals}
            callback {MVC->SetDisplayNormals(o->value());}
            xywh {1005 280 185 25} selection_color 63
          }
          Fl_Light_Button DisplayEndpointsButton {
            label {Display Endpoints}
            callback {MVC->SetDisplayEndpoints(o->value());}
            xywh {1005 310 185 25} selection_color 63
          }
          Fl_Button {} {
            label {Save STL}
            callback {Fl_File_Chooser chooser("C:/code/printed-parts", "*.stl", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadStl(dir);
MVC->redraw();
};}
            xywh {815 80 145 25} deactivate
          }
          Fl_Button {} {
            label {Scale model}
            callback {Fl_File_Chooser chooser("C:/code/printed-parts", "*.stl", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadStl(dir);
MVC->redraw();
};}
            xywh {815 110 145 25} deactivate
          }
        }
        Fl_Group {} {
          label {Printer definition}
          xywh {810 40 540 765} hide
        } {
          Fl_Value_Slider ShrinkSlider {
            label {Extruded material width}
            callback {MVC->SetShrinkValue(o->value());}
            xywh {820 245 375 20} type Horizontal align 5 value 0.7 textsize 14
          }
          Fl_Group {} {
            label {Build volume (mm)} open
            xywh {820 165 230 40} box UP_BOX deactivate
          } {
            Fl_Value_Input {} {
              label X
              xywh {840 176 45 23} maximum 5000 step 1 value 200
            }
            Fl_Value_Input {} {
              label Y
              xywh {915 176 45 23} maximum 5000 value 200
            }
            Fl_Value_Input {} {
              label Z
              xywh {990 176 45 23} maximum 5000 value 140
            }
          }
          Fl_Group {} {
            label {Print margin  (mm)} open
            xywh {1065 165 230 40} box UP_BOX deactivate
          } {
            Fl_Value_Input {} {
              label X
              xywh {1085 176 45 23} maximum 5000 step 1 value 200
            }
            Fl_Value_Input {} {
              label Y
              xywh {1160 176 45 23} maximum 5000 value 200
            }
            Fl_Value_Input {} {
              label Z
              xywh {1235 176 45 23} maximum 5000 value 140
            }
          }
        }
        Fl_Group {} {
          label Slicing
          xywh {810 40 540 765} hide
        } {
          Fl_Value_Slider CuttingPlaneSlider {
            label CuttingPlane
            callback {MVC->SetCuttingPlaneValue(o->value());}
            xywh {840 450 375 20} type Horizontal align 5 value 0.9 textsize 14
          }
          Fl_Value_Slider RotationSlider {
            label Rotation
            callback {MVC->SetInfillRotation(o->value());}
            xywh {840 490 370 20} type Horizontal align 5 maximum 360 step 1 value 45 textsize 14
          }
          Fl_Value_Slider InfillRotationPrLayerSlider {
            label {InFill Rotation pr. Layer}
            callback {MVC->SetInfillRotationPrLayer(o->value());}
            xywh {840 530 370 20} type Horizontal align 5 maximum 360 step 1 value 90 textsize 14
          }
          Fl_Value_Slider InfillDistanceSlider {
            label {Infill Distance}
            callback {MVC->SetInfillDistance(o->value());}
            xywh {840 570 370 20} type Horizontal align 5 minimum 0.1 maximum 10 step 0.1 value 2 textsize 14
          }
          Fl_Value_Slider LayerThicknessSlider {
            label {Layer Thickness}
            callback {MVC->SetLayerThickness(o->value());}
            xywh {840 610 370 20} type Horizontal align 5 minimum 0.1 maximum 3 step 0.1 value 0.4 textsize 14
          }
          Fl_Value_Slider OptimizationSlider {
            label Optimize
            callback {MVC->SetOptimization(o->value());}
            xywh {840 650 370 20} type Horizontal align 5 step 0.001 value 0.001 textsize 14
          }
        }
        Fl_Group {} {
          label GCode open
          xywh {810 40 540 765}
        } {
          Fl_Button {} {
            label {Load Gcode}
            callback {Fl_File_Chooser chooser("\\\\", "*.gcode", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadGCode(dir);
MVC->redraw();
};}
            xywh {815 80 145 25}
            code0 {\#include <FL/Fl_File_Chooser.H>}
          }
          Fl_Output GCodeLengthText {
            xywh {965 81 225 24}
          }
          Fl_Value_Slider GCodeDrawStartSlider {
            label {GCode draw start}
            callback {MVC->SetGCodeDrawStart(o->value());}
            xywh {815 130 370 20} type Horizontal align 5 step 0 textsize 14
          }
          Fl_Value_Slider GCodeDrawEndSlider {
            label {GCode draw end}
            callback {MVC->SetGCodeDrawEnd(o->value());}
            xywh {815 165 370 20} type Horizontal align 5 step 0 value 1 textsize 14
          }
          Fl_Button {} {
            label {Convert to GCode}
            callback {MVC->ConvertToGCode();}
            xywh {815 50 145 25}
          }
          Fl_Text_Editor GCodeEditor {
            label {GCode:} selected
            xywh {815 205 530 595}
          }
        }
        Fl_Group {} {
          label Debug
          xywh {810 40 540 765} color 47 labelfont 1 labelcolor 1 hide
        } {
          Fl_Value_Slider ExamineSlider {
            label Examine
            callback {MVC->SetExamine(o->value());}
            xywh {880 760 365 20} type Horizontal align 5 step 0.001 value 0.098 textsize 14
          }
          Fl_Light_Button DisplayDebuginFillButton {
            label {Display Debug inFill}
            callback {MVC->SetDisplayDebuginFill(o->value());}
            xywh {1075 720 170 20} selection_color 63
          }
          Fl_Light_Button DisplayDebugButton {
            label Debug
            callback {if(o->value())
{
DisplayDebuginFillButton->show();
ExamineSlider->show();
}
else
{
DisplayDebuginFillButton->hide();
ExamineSlider->hide();
}


MVC->redraw();}
            xywh {880 720 190 20} selection_color 63
          }
          Fl_Light_Button DisplayGCodeButton {
            label {Display GCode}
            callback {MVC->SetDisplayGCode(o->value());}
            xywh {880 540 155 20} value 1 selection_color 63
          }
          Fl_Light_Button DisplaySTLButton {
            label {Display STL objects}
            callback {MVC->SetDisplaySTL(o->value());}
            xywh {880 570 155 20} selection_color 63
          }
          Fl_Light_Button DisplayCuttingPlaneButton {
            label {Display CuttingPlane}
            callback {MVC->SetDisplayCuttingPlane(o->value());}
            xywh {880 645 155 20} selection_color 63
          }
          Fl_Light_Button DisplayinFillButton {
            label {Display inFill}
            callback {MVC->SetDisplayinFill(o->value());}
            xywh {880 670 155 20} selection_color 63
          }
          Fl_Light_Button DisplayAllLayers {
            label {Display all layers}
            callback {MVC->SetDisplayAllLayers(o->value());}
            xywh {880 695 155 20} selection_color 63
          }
          Fl_Light_Button DrawVertexNumbersButton {
            label {Draw vertex numbers}
            callback {MVC->SetDrawVertexNumbers(o->value());}
            xywh {1040 670 155 20} selection_color 63
          }
          Fl_Light_Button DrawLineNumbersButton {
            label {Draw line numbers}
            callback {MVC->SetDrawLineNumbers(o->value());}
            xywh {1040 695 155 20} selection_color 63
          }
        }
      }
    }
  }
  Function {show(int argc, char **argv)} {} {
    code {mainWindow->show(argc, argv);
//MVC->ReadStl("C:/box.stl");
MVC->ReadStl("C:/\#Downloads/Reprap Exchange/N_DSL-Stylus.stl");
//MVC->ReadStl("C:/code/printed-parts/frame-vertex_6off.stl");
MVC->redraw();} {}
  }
} 
