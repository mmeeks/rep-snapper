# data file for the Fltk User Interface Designer (fluid)
version 1.0109 
header_name {.h} 
code_name {.cxx}
decl {class ModelViewController;} {public global
} 

class GUI {open
} {
  Function {GUI()} {open
  } {
    Fl_Window mainWindow {
      label {RepSnapper by Kulitorum www.kulitorum.com} open
      xywh {409 262 1379 830} type Double box UP_BOX color 0 selection_color 0 labelsize 12 hide resizable
    } {
      Fl_Box MVC {
        label {An instace of ModelViewController}
        xywh {10 10 805 805} box UP_BOX align 16
        code0 {\#include "StdAfx.h"}
        code1 {\#ifndef M_PI
\#define M_PI 3.14159265358979323846
\#endif}
        class ModelViewController
      }
      Fl_Tabs Tabs {open
        xywh {820 10 560 815} align 5
      } {
        Fl_Group {} {
          label {Input file}
          xywh {820 30 550 785} hide
        } {
          Fl_Button {} {
            label {Load STL}
            callback {Fl_File_Chooser chooser("C:/code/printed-parts", "*.stl", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadStl(dir);
MVC->redraw();
};}
            xywh {835 40 145 25}
          }
          Fl_Light_Button FixSTLerrorsButton {
            label {Fix STL errors}
            callback {MVC->redraw()}
            xywh {985 40 135 25} value 1 selection_color 63
          }
          Fl_Button {} {
            label {Save STL}
            callback {Fl_File_Chooser chooser("C:/code/printed-parts", "*.stl", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadStl(dir);
MVC->redraw();
};}
            xywh {835 70 145 25} deactivate
          }
          Fl_Button {} {
            label {Scale model}
            callback {Fl_File_Chooser chooser("C:/code/printed-parts", "*.stl", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadStl(dir);
MVC->redraw();
};}
            xywh {835 100 145 25} deactivate
          }
          Fl_Group {} {
            label {Object rotation} open
            xywh {830 765 535 50} box FLAT_BOX color 39
          } {
            Fl_Button AutoRotateButton {
              label {Auto rotate}
              callback {MVC->OptimizeRotation();
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();}
              xywh {840 775 125 25}
            }
            Fl_Button RotateXButton {
              label {Rotate X}
              callback {MVC->RotateObject(1,0,0, M_PI/4);
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();}
              xywh {970 775 125 25}
            }
            Fl_Button RotateYButton {
              label {Rotate Y}
              callback {MVC->RotateObject(0,1,0, M_PI/4);
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();}
              xywh {1100 775 125 25}
            }
            Fl_Button RotateZButton {
              label {Rotate Z}
              callback {MVC->RotateObject(0,0,1, M_PI/4);
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();}
              xywh {1230 775 125 25}
            }
          }
        }
        Fl_Group {} {
          label {Printer definition}
          xywh {820 30 550 765} hide
        } {
          Fl_Group {} {
            label {Build volume (mm)} open
            xywh {830 55 230 40} box FLAT_BOX color 39
          } {
            Fl_Value_Input VolumeX {
              label X
              xywh {850 66 45 23} maximum 5000 step 1 value 200
            }
            Fl_Value_Input VolumeY {
              label Y
              xywh {925 66 45 23} maximum 5000 value 200
            }
            Fl_Value_Input VolumeZ {
              label Z
              xywh {1000 66 45 23} maximum 5000 value 140
            }
          }
          Fl_Group {} {
            label {Print margin  (mm)} open
            xywh {1210 55 155 40} box FLAT_BOX color 39
          } {
            Fl_Value_Input MarginX {
              label X
              xywh {1235 66 45 23} maximum 100 step 1 value 10
            }
            Fl_Value_Input MarginY {
              label Y
              xywh {1310 66 45 23} maximum 100 step 1 value 10
            }
          }
          Fl_Group {} {
            label Acceleration open
            xywh {830 490 535 120} box FLAT_BOX color 39
          } {
            Fl_Value_Slider accelerationStepsSlider {
              label {Number of acceleration steps}
              callback {MVC->NumAccelerationSteps(o->value());}
              xywh {840 540 515 20} type Horizontal selection_color 2 align 5 maximum 10 step 1 value 5 textsize 14 deactivate
            }
            Fl_Value_Slider distanceBetweenSpeedStepsSlider {
              label {Distance used to read full speed(mm)}
              callback {MVC->SetDistancePrAccelerationStep(o->value())}
              xywh {840 580 515 20} type Horizontal selection_color 2 align 5 maximum 10 value 0.1 textsize 14
            }
            Fl_Light_Button EnableAccelerationButton {
              label {Enable Acceleration}
              callback {MVC->SetEnableAcceleration(o->value());
if(o->value())
{
accelerationStepsSlider->activate();
distanceBetweenSpeedStepsSlider->activate();
UseFirmwareAccelerationButton->activate();
}
else
{
accelerationStepsSlider->deactivate();
distanceBetweenSpeedStepsSlider->deactivate();
UseFirmwareAccelerationButton->deactivate();
}}
              xywh {840 500 255 20} selection_color 63
            }
            Fl_Light_Button UseFirmwareAccelerationButton {
              label {Use Firmware Acceleration}
              callback {MVC->SetUseFirmwareAcceleration(o->value());

if(o->value())
{
accelerationStepsSlider->deactivate();
distanceBetweenSpeedStepsSlider->label("Distance used to read full speed(mm)");;
}
else
{
accelerationStepsSlider->activate();
distanceBetweenSpeedStepsSlider->label("Distance Pr Acceleration Step (mm)");;
}
accelerationStepsSlider->redraw();
distanceBetweenSpeedStepsSlider->redraw();}
              xywh {1100 500 255 20} selection_color 63
            }
          }
          Fl_Group {} {
            label {Print speeds}
            xywh {830 290 535 170} box FLAT_BOX color 39
          } {
            Fl_Value_Slider MaxPrintSpeedXYSlider {
              label {Max PrintSpeed XY (mm/minute)}
              callback {MVC->SetMaxPrintSpeedXY(o->value());}
              xywh {840 350 515 20} type Horizontal selection_color 2 align 5 maximum 8000 step 100 value 4000 textsize 14
            }
            Fl_Value_Slider MinPrintSpeedZSlider {
              label {Min PrintSpeed Z (mm/minute)}
              callback {MVC->SetMinPrintSpeedZ(o->value());}
              xywh {840 390 515 20} type Horizontal selection_color 2 align 5 minimum 1 maximum 2500 step 10 value 50 textsize 14
            }
            Fl_Value_Slider MinPrintSpeedXYSlider {
              label {Min PrintSpeed XY (mm/minute)}
              callback {MVC->SetMinPrintSpeedXY(o->value());}
              xywh {840 310 515 20} type Horizontal selection_color 2 align 5 maximum 8000 step 100 value 1000 textsize 14
            }
            Fl_Value_Slider MaxPrintSpeedZSlider {
              label {Max PrintSpeed Z (mm/minute)}
              callback {MVC->SetMaxPrintSpeedZ(o->value());}
              xywh {840 430 515 20} type Horizontal selection_color 2 align 5 maximum 2500 step 10 value 150 textsize 14
            }
          }
          Fl_Group {} {
            label Extruder open
            xywh {830 125 535 120} box FLAT_BOX color 39
          } {
            Fl_Value_Slider ExtrudedMaterialWidthSlider {
              label {Extruded material width}
              callback {MVC->SetExtrudedMaterialWidth(o->value());}
              xywh {840 180 515 20} type Horizontal selection_color 2 align 5 value 0.7 textsize 14
            }
            Fl_Value_Slider extrusionFactorSlider {
              label {Extrusion multiplier}
              callback {MVC->SetExtrusionFactor(o->value());}
              xywh {840 220 515 20} type Horizontal selection_color 2 align 5 maximum 2 value 1 textsize 14
            }
            Fl_Light_Button UseIncrementalEcodeButton {
              label {Use incremental ecode (for seperate extruder controller)}
              callback {MVC->SetUseIncrementalEcode(o->value());}
              xywh {840 135 515 20} selection_color 63
            }
          }
        }
        Fl_Group {} {
          label Infill
          xywh {820 30 550 770} hide
        } {
          Fl_Group {} {
            label Infill open
            xywh {830 55 540 250} box FLAT_BOX color 39
          } {
            Fl_Value_Slider InfillRotationSlider {
              label Rotation
              callback {MVC->SetInfillRotation(o->value());}
              xywh {840 115 515 20} type Horizontal selection_color 2 align 5 maximum 360 step 1 value 45 textsize 14
            }
            Fl_Value_Slider InfillRotationPrLayerSlider {
              label {InFill Rotation pr. Layer}
              callback {MVC->SetInfillRotationPrLayer(o->value());}
              xywh {840 155 515 20} type Horizontal selection_color 2 align 5 maximum 360 step 1 value 90 textsize 14
            }
            Fl_Value_Slider InfillDistanceSlider {
              label {Infill Distance}
              callback {MVC->SetInfillDistance(o->value());}
              xywh {840 195 515 20} type Horizontal selection_color 2 align 5 minimum 0.1 maximum 10 step 0.1 value 2 textsize 14
            }
            Fl_Value_Slider LayerThicknessSlider {
              label {Layer Thickness}
              callback {MVC->SetLayerThickness(o->value());}
              xywh {840 235 515 20} type Horizontal selection_color 2 align 5 minimum 0.1 maximum 3 step 0.1 value 0.4 textsize 14
            }
            Fl_Value_Slider OptimizationSlider {
              label Optimize
              callback {MVC->SetOptimization(o->value());}
              xywh {840 275 515 20} type Horizontal selection_color 2 align 5 value 0.01 textsize 14
            }
            Fl_Light_Button ShellOnlyButton {
              label {Shell Only - no infill}
              callback {MVC->SetShellOnly(o->value());}
              xywh {840 75 255 20} selection_color 63
            }
            Fl_Value_Slider ShellCountSlider {
              label {Shell count}
              callback {MVC->SetShellCount(o->value());}
              xywh {1100 75 255 20} type Horizontal selection_color 2 align 5 minimum 1 maximum 10 step 1 value 1 textsize 14
            }
          }
        }
        Fl_Group {} {
          label Apron
          xywh {820 30 550 765} color 47 hide
        } {
          Fl_Group {} {
            label Size open
            xywh {830 55 530 305} box FLAT_BOX color 39
          } {
            Fl_Value_Slider ApronSizeSlider {
              label Size
              callback {MVC->SetApronSize(o->value());}
              tooltip {How much larget then the print should the Raft be.} xywh {840 115 510 20} type Horizontal selection_color 2 align 5 minimum 0.1 maximum 2 step 0.1 value 1.3 textsize 14 deactivate
            }
            Fl_Value_Slider ApronCoverageXSlider {
              label {Coverage X axis}
              callback {MVC->SetApronCoverageX(o->value());}
              xywh {840 195 510 20} type Horizontal selection_color 2 align 5 minimum 1 maximum 100 step 1 value 30 textsize 14 deactivate
            }
            Fl_Value_Slider ApronHeightSlider {
              label Height
              callback {MVC->SetApronHeight(o->value());}
              xywh {840 155 510 20} type Horizontal selection_color 2 align 5 minimum 1 maximum 30 step 1 value 8 textsize 14 deactivate
            }
            Fl_Value_Slider ApronCoverageYSlider {
              label {Coverage Y axis}
              callback {MVC->SetApronCoverageY(o->value());}
              xywh {840 235 510 20} type Horizontal selection_color 2 align 5 minimum 1 maximum 100 step 1 value 30 textsize 14 deactivate
            }
            Fl_Light_Button ApronEnableButton {
              label Enable
              callback {MVC->SetApronEnable(o->value());}
              xywh {840 75 250 20}
            }
            Fl_Value_Slider ApronDistanceToObjectSlider {
              label {Distance to object}
              callback {MVC->SetApronDistanceToObject(o->value());}
              xywh {840 275 510 20} type Horizontal selection_color 2 align 5 minimum -1 maximum 3 step 0.1 value 0.5 textsize 14 deactivate
            }
            Fl_Value_Slider ApronInfillDistanceSlider {
              label {Infill Distance}
              callback {MVC->SetApronInfillDistance(o->value());}
              xywh {840 315 510 20} type Horizontal selection_color 2 align 5 minimum 0.1 maximum 10 step 0.1 value 2 textsize 14 deactivate
            }
            Fl_Light_Button ApronPreviewButton {
              label Preview
              callback {MVC->SetApronPreview(o->value());}
              xywh {1095 75 255 20} deactivate
            }
          }
        }
        Fl_Group {} {
          label Raft
          xywh {820 30 550 765} color 47 hide
        } {
          Fl_Group {} {
            label Base open
            xywh {825 210 535 270} box FLAT_BOX color 39
          } {
            Fl_Value_Slider RaftMaterialPrDistanceRatioSlider {
              label {Material pr. distance ratio}
              callback {MVC->SetRaftMaterialPrDistanceRatio(o->value());}
              xywh {835 275 515 20} type Horizontal selection_color 2 align 5 minimum 0.1 maximum 3 step 0.1 value 1.75 textsize 14
            }
            Fl_Value_Slider RaftRotationSlider {
              label Rotation
              callback {MVC->SetRaftRotation(o->value());}
              xywh {835 315 515 20} type Horizontal selection_color 2 align 5 maximum 360 step 1 value 90 textsize 14
            }
            Fl_Value_Slider RaftBaseDistanceSlider {
              label {Distance between lines}
              callback {MVC->SetRaftBaseDistance(o->value());}
              tooltip {Distance between the base layer's lines} xywh {835 360 515 20} type Horizontal selection_color 2 align 5 minimum 0.1 maximum 10 step 0.1 value 2 textsize 14
            }
            Fl_Value_Slider RaftBaseThicknessSlider {
              label {Thinkness ratio}
              callback {MVC->SetRaftBaseThickness(o->value());}
              tooltip {How much thicker or thinner then a normal layer should the raft base be.} xywh {835 405 515 20} type Horizontal selection_color 2 align 5 minimum 0.1 maximum 3 step 0.1 value 1 textsize 14
            }
            Fl_Value_Slider RaftBaseLayerCountSlider {
              label {Number of Base layers}
              callback {MVC->SetRaftBaseLayerCount(o->value());}
              xywh {835 235 515 20} type Horizontal selection_color 2 align 5 maximum 5 step 1 value 1 textsize 14
            }
            Fl_Value_Slider RaftBaseTemperatureSlider {
              label {Temperature ratio}
              callback {MVC->SetRaftBaseTemperature(o->value());}
              tooltip {To make the flow better, you may want to print the base layers hotter then the rest of the print.} xywh {835 450 515 20} type Horizontal selection_color 2 align 5 minimum 0.1 maximum 3 value 1.1 textsize 14
            }
          }
          Fl_Group {} {
            label Size open
            xywh {825 135 535 55} box FLAT_BOX color 39
          } {
            Fl_Value_Slider RaftSizeSlider {
              label Size
              callback {MVC->SetRaftSize(o->value());}
              tooltip {How much larget then the print should the Raft be.} xywh {835 160 515 20} type Horizontal selection_color 2 align 5 minimum 1 maximum 3 value 1.33 textsize 14
            }
          }
          Fl_Group {} {
            label Interface open
            tooltip {This is the layer(s) connecting to the print itself. Unlike the Base layer, they should be "nice" and with a normal extrusion ratio.} xywh {825 510 535 285} box FLAT_BOX color 39
          } {
            Fl_Value_Slider RaftInterfaceMaterialPrDistanceRatioSlider {
              label {Material pr. distance ratio}
              callback {MVC->SetRaftInterfaceMaterialPrDistanceRatio(o->value());}
              xywh {835 585 515 20} type Horizontal selection_color 2 align 5 minimum 0.1 maximum 3 step 0.1 value 1 textsize 14
            }
            Fl_Value_Slider RaftRotationPrLayerSlider {
              label {Rotation pr. layer}
              callback {MVC->SetRaftRotationPrLayer(o->value());}
              xywh {835 630 515 20} type Horizontal selection_color 2 align 5 maximum 360 step 1 value 90 textsize 14
            }
            Fl_Value_Slider RaftInterfaceDistanceSlider {
              label {Distance between lines}
              callback {MVC->SetRaftInterfaceDistance(o->value());}
              tooltip {Distance between the base layer's lines} xywh {835 675 515 20} type Horizontal selection_color 2 align 5 minimum 0.1 maximum 10 step 0.1 value 2 textsize 14
            }
            Fl_Value_Slider RaftInterfaceThicknessSlider {
              label {Thinkness ratio}
              callback {MVC->SetRaftBaseThickness(o->value());}
              tooltip {How much thicker or thinner then a normal layer should the raft base be.} xywh {835 720 515 20} type Horizontal selection_color 2 align 5 minimum 0.1 maximum 3 step 0.1 value 1 textsize 14
            }
            Fl_Value_Slider RaftInterfaceLayerCountSlider {
              label {Number of interface layers}
              callback {MVC->SeRaftInterfaceLayerCount(o->value());}
              xywh {835 540 515 20} type Horizontal selection_color 2 align 5 maximum 5 step 1 value 2 textsize 14
            }
            Fl_Value_Slider RaftInterfaceTemperatureSlider {
              label {Temperature ratio}
              callback {MVC->SetRaftInterfaceTemperature(o->value());}
              tooltip {To make the flow better, you may want to print the base layers hotter then the rest of the print.} xywh {835 765 515 20} type Horizontal selection_color 2 align 5 minimum 0.1 maximum 3 value 1.1 textsize 14
            }
          }
          Fl_Group {} {
            label Size open
            xywh {825 50 535 55} box FLAT_BOX color 39
          } {
            Fl_Light_Button RaftEnableButton {
              label Enable
              callback {MVC->SetRaftEnable(o->value());}
              xywh {830 70 255 25}
            }
            Fl_Light_Button {} {
              label Preview
              callback {MVC->SetApronPreview(o->value());}
              xywh {1090 70 255 25} deactivate
            }
          }
        }
        Fl_Group {} {
          label GCode open
          xywh {830 40 550 785} hide
        } {
          Fl_Button {} {
            label {Load Gcode}
            callback {Fl_File_Chooser chooser("\\\\", "*.gcode", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadGCode(dir);
MVC->redraw();
};}
            xywh {835 80 145 25}
            code0 {\#include <FL/Fl_File_Chooser.H>}
          }
          Fl_Output GCodeLengthText {
            xywh {985 81 225 24}
          }
          Fl_Button {} {
            label {Convert to GCode}
            callback {MVC->ConvertToGCode();}
            xywh {835 50 145 25}
          }
          Fl_Tabs {} {open
            xywh {830 110 550 715}
          } {
            Fl_Text_Editor GCodeStart {
              label {Start code}
              xywh {830 130 550 695} hide
              code0 {Fl_Text_Buffer *startbuff = new Fl_Text_Buffer();}
              code1 {o->buffer(startbuff);}
            }
            Fl_Text_Editor GCodeLayer {
              label {Next layer}
              xywh {830 130 550 695} hide
              code0 {Fl_Text_Buffer *layerbuff = new Fl_Text_Buffer();}
              code1 {o->buffer(layerbuff);}
            }
            Fl_Text_Editor GCodeEnd {
              label {End code}
              xywh {830 130 550 695} hide
              code0 {Fl_Text_Buffer *endbuff = new Fl_Text_Buffer();}
              code1 {o->buffer(endbuff);}
            }
            Fl_Text_Editor GCodeResult {
              label Result
              xywh {830 130 550 695}
              code0 {Fl_Text_Buffer *resultbuff = new Fl_Text_Buffer();}
              code1 {o->buffer(resultbuff);}
            }
          }
          Fl_Button {} {
            label {Save Gcode}
            callback {Fl_File_Chooser chooser("\\\\", "*.gcode", Fl_File_Chooser::CREATE, "Choose filename");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
Fl_Text_Buffer *buffer = GCodeResult->buffer();

int result = buffer->savefile(chooser.value());

switch(result)
{
case 0:	// Succes
break;
case 1:	//Open for write failed
fl_alert("Error saving GCode file, error creating file.", "OK");
break;
case 2: // Partially saved file
fl_alert("Error saving GCode file, while writing file, is the disk full?.", "OK");
break;
}

MVC->redraw();
};}
            xywh {1215 80 145 25}
            code0 {\#include <FL/Fl_File_Chooser.H>}
          }
        }
        Fl_Group {} {
          label Score open
          xywh {820 30 550 785} hide
        } {
          Fl_Button {} {
            label {Placeholder and reminder for antomatic Score'ing of objects (see todo folder)}
            xywh {830 55 540 140}
          }
        }
        Fl_Group {} {
          label Rendering
          xywh {820 30 550 780} color 47 hide
        } {
          Fl_Group {} {
            label {STL rendering} open
            xywh {825 60 535 280} box FLAT_BOX color 39
          } {
            Fl_Light_Button DisplayPolygonsButton {
              label {Display Polygons}
              callback {MVC->SetDisplayPolygons(o->value());}
              xywh {860 70 220 20} value 1 selection_color 63
            }
            Fl_Light_Button DisplayWireframeButton {
              label {Display Wireframe}
              callback {MVC->SetDisplayWireframe(o->value());}
              xywh {1125 70 140 20} selection_color 63
            }
            Fl_Light_Button DisplayNormalsButton {
              label {Display Normals}
              callback {MVC->SetDisplayNormals(o->value());}
              xywh {860 170 220 20} selection_color 63
            }
            Fl_Light_Button DisplayEndpointsButton {
              label {Display Endpoints}
              callback {MVC->SetDisplayEndpoints(o->value());}
              xywh {1125 170 220 20} selection_color 63
            }
            Fl_Value_Slider PolygonValSlider {
              label Val
              callback {MVC->SetPolygonVal(o->value());
MVC->redraw();}
              xywh {860 135 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider PolygonSatSlider {
              label Sat
              callback {MVC->SetPolygonSat(o->value());
MVC->redraw();}
              xywh {860 115 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider PolygonHueSlider {
              label Hue
              callback {MVC->SetPolygonHue(o->value());
MVC->redraw();}
              xywh {860 95 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider WireframeValSlider {
              label Val
              callback {MVC->SetWireframeVal(o->value());
MVC->redraw();}
              xywh {1125 135 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider WireframeSatSlider {
              label Sat
              callback {MVC->SetWireframeSat(o->value());
MVC->redraw();}
              xywh {1125 115 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider WireframeHueSlider {
              label Hue
              callback {MVC->SetWireframeHue(o->value());
MVC->redraw();}
              xywh {1125 95 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider NormalValSlider {
              label Val
              callback {MVC->SetNormalsVal(o->value());
MVC->redraw();}
              xywh {860 235 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider NormalSatSlider {
              label Sat
              callback {MVC->SetNormalsSat(o->value());
MVC->redraw();}
              xywh {860 215 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider NormalHueSlider {
              label Hue
              callback {MVC->SetNormalsHue(o->value());
MVC->redraw();}
              xywh {860 195 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider EndpointValSlider {
              label Val
              callback {MVC->SetEndpointsVal(o->value());
MVC->redraw();}
              xywh {1125 235 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider EndpointSatSlider {
              label Sat
              callback {MVC->SetEndpointsSat(o->value());
MVC->redraw();}
              xywh {1125 215 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider EndpointHueSlider {
              label Hue
              callback {MVC->SetEndpointsHue(o->value());
MVC->redraw();}
              xywh {1125 195 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Light_Button DisplayBBoxButton {
              label {Display Bounding Box}
              callback {MVC->SetDisplayBBox(o->value());}
              xywh {860 315 220 20} selection_color 63
            }
            Fl_Value_Slider HighlightSlider {
              label Highlight
              callback {MVC->SetHighlight(o->value());
MVC->redraw();}
              xywh {1125 315 220 20} type {Horz Knob} selection_color 2 align 5 value 0.5 textsize 14
            }
            Fl_Value_Slider NormalLengthSlider {
              label {Normals length}
              callback {MVC->SetNormalsLength(o->value());
MVC->redraw();}
              xywh {860 275 220 20} type {Horz Knob} selection_color 2 align 5 minimum 1 maximum 30 step 0.1 value 10 textsize 14
            }
            Fl_Value_Slider EndpointSizeSlider {
              label {Endpoints size}
              callback {MVC->SetEndPointSize(o->value());
MVC->redraw();}
              xywh {1125 275 220 20} type {Horz Knob} selection_color 2 align 5 minimum 1 maximum 20 step 0.1 value 8 textsize 14
            }
            Fl_Light_Button DisplayWireframeShadedButton {
              label Shaded
              callback {MVC->SetDisplayWireframeShaded(o->value());}
              xywh {1270 70 75 20} selection_color 63
            }
          }
          Fl_Group {} {
            label {GCode rendering} open
            xywh {825 360 535 185} box FLAT_BOX color 39
          } {
            Fl_Light_Button DisplayGCodeButton {
              label {Display GCode}
              callback {MVC->SetDisplayGCode(o->value());
MVC->redraw();}
              xywh {860 370 220 20} value 1 selection_color 63
            }
            Fl_Value_Slider GCodeExtrudeValSlider {
              label Val
              callback {MVC->SetGCodeExtrudeVal(o->value());
MVC->redraw();}
              xywh {860 435 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider GCodeExtrudeSatSlider {
              label Sat
              callback {MVC->SetGCodeExtrudeSat(o->value());
MVC->redraw();}
              xywh {860 415 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider GCodeExtrudeHueSlider {
              label Hue
              callback {MVC->SetGCodeExtrudeHue(o->value());
MVC->redraw();}
              xywh {860 395 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Light_Button LuminanceShowsSpeedButton {
              label {Luminance shows speed}
              callback {MVC->SetLuminanceShowsSpeed(o->value());
MVC->redraw();}
              xywh {1125 370 220 20} value 1 selection_color 63
            }
            Fl_Button {} {
              label {Crop Range}
              callback {float start = GCodeDrawStartSlider->value();
float end = GCodeDrawEndSlider->value();
GCodeDrawStartSlider->range(start,end);
GCodeDrawEndSlider->range(start,end);
GCodeDrawStartSlider->redraw();
GCodeDrawEndSlider->redraw();}
              xywh {860 510 220 20}
            }
            Fl_Button {} {
              label {Reset crop range}
              callback {GCodeDrawStartSlider->range(0,1);
GCodeDrawEndSlider->range(0,1);
GCodeDrawStartSlider->redraw();
GCodeDrawEndSlider->redraw();}
              xywh {1130 510 220 20}
            }
            Fl_Slider GCodeDrawStartSlider {
              label From
              callback {MVC->SetGCodeDrawStart(o->value());}
              xywh {860 460 490 20} type Horizontal color 39 selection_color 2 align 4
            }
            Fl_Slider GCodeDrawEndSlider {
              label To
              callback {MVC->SetGCodeDrawEnd(o->value());}
              xywh {860 485 490 20} type Horizontal color 39 selection_color 2 align 4
            }
            Fl_Value_Slider GCodeMoveValSlider {
              label Val
              callback {MVC->SetGCodeMoveVal(o->value());
MVC->redraw();}
              xywh {1125 435 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider GCodeMoveSatSlider {
              label Sat
              callback {MVC->SetGCodeMoveSat(o->value());
MVC->redraw();}
              xywh {1125 415 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
            Fl_Value_Slider GCodeMoveHueSlider {
              label Hue
              callback {MVC->SetGCodeMoveHue(o->value());
MVC->redraw();}
              xywh {1125 395 220 20} type {Horz Knob} selection_color 2 align 4 value 0.5 textsize 14
            }
          }
          Fl_Group {} {
            label {Layer preview} open
            xywh {825 575 540 90} box FLAT_BOX color 39
          } {
            Fl_Value_Slider CuttingPlaneValueSlider {
              label Cuttingplane
              callback {MVC->SetCuttingPlaneValue(o->value());}
              xywh {835 635 515 20} type Horizontal align 5 value 0.5 textsize 14
            }
            Fl_Light_Button DisplayCuttingPlaneButton {
              label {Display CuttingPlane}
              callback {MVC->SetDisplayCuttingPlane(o->value());}
              xywh {835 590 170 20} selection_color 63
            }
            Fl_Light_Button DisplayinFillButton {
              label {Display inFill}
              callback {MVC->SetDisplayinFill(o->value());}
              xywh {1010 590 165 20} selection_color 63
            }
            Fl_Light_Button DisplayAllLayersButton {
              label {Display all layers}
              callback {MVC->SetDisplayAllLayers(o->value());}
              xywh {1180 590 170 20} selection_color 63
            }
          }
          Fl_Group {} {
            label Lights open
            xywh {825 700 540 70} box FLAT_BOX color 39
          } {
            Fl_Light_Button {} {
              label {Enable light 0}
              callback {MVC->SetEnableLight(0, o->value());}
              xywh {835 715 120 20} value 1 selection_color 63
            }
            Fl_Light_Button {} {
              label {Enable light 1}
              callback {MVC->SetEnableLight(1, o->value());}
              xywh {835 740 120 20} selection_color 63
            }
            Fl_Light_Button {} {
              label {Enable light 2}
              callback {MVC->SetEnableLight(2, o->value());}
              xywh {1095 715 120 20} selection_color 63
            }
            Fl_Light_Button {} {
              label {Enable light 3}
              callback {MVC->SetEnableLight(3, o->value());}
              xywh {1095 740 120 20} value 1 selection_color 63
            }
            Fl_Button {} {
              label {Edit light 0}
              xywh {960 715 130 20} deactivate
            }
            Fl_Button {} {
              label {Edit light 1}
              xywh {960 740 130 20} deactivate
            }
            Fl_Button {} {
              label {Edit light 2}
              xywh {1220 715 130 20} deactivate
            }
            Fl_Button {} {
              label {Edit light 3}
              xywh {1220 740 130 20} deactivate
            }
          }
        }
        Fl_Group {} {
          label Debug selected
          xywh {820 30 550 765} color 47
        } {
          Fl_Value_Slider ExamineSlider {
            label Examine
            callback {MVC->SetExamine(o->value());}
            xywh {890 750 365 20} type Horizontal align 5 step 0.001 value 0.098 textsize 14
          }
          Fl_Light_Button DisplayDebuginFillButton {
            label {Display Debug inFill}
            callback {MVC->SetDisplayDebuginFill(o->value());}
            xywh {1085 710 170 20} selection_color 63
          }
          Fl_Light_Button DisplayDebugButton {
            label Debug
            callback {if(o->value())
{
DisplayDebuginFillButton->show();
ExamineSlider->show();
}
else
{
DisplayDebuginFillButton->hide();
ExamineSlider->hide();
}


MVC->redraw();}
            xywh {890 710 190 20} selection_color 63
          }
          Fl_Light_Button DrawVertexNumbersButton {
            label {Draw vertex numbers}
            callback {MVC->SetDrawVertexNumbers(o->value());}
            xywh {890 685 190 20} selection_color 63
          }
          Fl_Light_Button DrawLineNumbersButton {
            label {Draw line numbers}
            callback {MVC->SetDrawLineNumbers(o->value());}
            xywh {1080 685 155 20} selection_color 63
          }
          Fl_Group {} {
            label Size open
            xywh {825 60 535 55} box FLAT_BOX color 39
          } {
            Fl_Button {} {
              label {Save settings}
              callback {Fl_Text_Buffer* buffer = GCodeStart->buffer();
char* pText = buffer->text();
MVC->ProcessControl.GCodeStartText = string(pText);
buffer = GCodeLayer->buffer();
pText = buffer->text();
MVC->ProcessControl.GCodeLayerText = string(pText);
buffer = GCodeEnd->buffer();
pText = buffer->text();
MVC->ProcessControl.GCodeEndText = string(pText);
MVC->ProcessControl.SaveXML();}
              xywh {840 70 185 30}
            }
          }
          Fl_Light_Button ConnectToPrinterButton {
            label {Connect to printer}
            callback {MVC->ConnectToPrinter(o->value());}
            xywh {840 145 220 25}
          }
          Fl_Light_Button PrintButton {
            label Print
            callback {MVC->Print();}
            xywh {840 175 220 25}
          }
          Fl_Light_Button SwitchHeatOnButton {
            label {Switch heat on}
            callback {MVC->SwitchHeat(o->value(), TargetTempText->value());}
            xywh {840 205 220 25}
          }
          Fl_Value_Input TargetTempText {
            label {Target temp}
            callback {MVC->SetTargetTemp(o->value());}
            xywh {1225 176 55 24}
          }
          Fl_Value_Output CurrentTempText {
            label {Current temp}
            xywh {1225 206 55 24}
          }
          Fl_Light_Button RunExtruderButton {
            label {Run extruder}
            callback {MVC->RunExtruder();}
            xywh {840 235 220 25}
          }
          Fl_Light_Button SetExtruderDirectionButton {
            label Reverse
            callback {MVC->SetExtruderDirection(o->value());}
            xywh {1065 235 220 25}
          }
          Fl_Text_Display CommunationsLogText {
            label {Communications log}
            xywh {840 285 445 390} box UP_FRAME align 5
          }
        }
      }
    }
  }
  Function {show(int argc, char **argv)} {open
  } {
    code {Fl::visual( FL_DOUBLE | FL_RGB);
Fl::scheme("plastic");
mainWindow->show(argc, argv);
//MVC->ReadStl("C:/box.stl");
MVC->init();
MVC->ReadStl("C:/\#Downloads/Reprap Exchange/N_DSL-Stylus.stl");
//MVC->ReadStl("C:/code/printed-parts/frame-vertex_6off.stl");
MVC->CopySettingsToGUI();
MVC->draw();
MVC->redraw();
MVC->redraw();} {}
  }
} 
