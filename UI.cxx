// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "UI.h"

void GUI::cb_Load_i(Fl_Button*, void*) {
  Fl_File_Chooser chooser("C:/code/printed-parts", "*.stl", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadStl(dir);
MVC->redraw();
};
}
void GUI::cb_Load(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->user_data()))->cb_Load_i(o,v);
}

void GUI::cb_FixSTLerrorsButton_i(Fl_Light_Button*, void*) {
  MVC->redraw();
}
void GUI::cb_FixSTLerrorsButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->user_data()))->cb_FixSTLerrorsButton_i(o,v);
}

void GUI::cb_Save_i(Fl_Button*, void*) {
  Fl_File_Chooser chooser("C:/code/printed-parts", "*.stl", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadStl(dir);
MVC->redraw();
};
}
void GUI::cb_Save(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_i(o,v);
}

void GUI::cb_Scale_i(Fl_Button*, void*) {
  Fl_File_Chooser chooser("C:/code/printed-parts", "*.stl", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadStl(dir);
MVC->redraw();
};
}
void GUI::cb_Scale(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->user_data()))->cb_Scale_i(o,v);
}

void GUI::cb_AutoRotateButton_i(Fl_Button*, void*) {
  MVC->OptimizeRotation();
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();
}
void GUI::cb_AutoRotateButton(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_AutoRotateButton_i(o,v);
}

void GUI::cb_RotateXButton_i(Fl_Button*, void*) {
  MVC->RotateObject(1,0,0, M_PI/4);
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();
}
void GUI::cb_RotateXButton(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RotateXButton_i(o,v);
}

void GUI::cb_RotateYButton_i(Fl_Button*, void*) {
  MVC->RotateObject(0,1,0, M_PI/4);
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();
}
void GUI::cb_RotateYButton(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RotateYButton_i(o,v);
}

void GUI::cb_RotateZButton_i(Fl_Button*, void*) {
  MVC->RotateObject(0,0,1, M_PI/4);
MVC->CalcBoundingBoxAndZoom();
MVC->redraw();
}
void GUI::cb_RotateZButton(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RotateZButton_i(o,v);
}

void GUI::cb_Save1_i(Fl_Button*, void*) {
  Fl_Text_Buffer* buffer = GCodeStart->buffer();
char* pText = buffer->text();
MVC->ProcessControl.GCodeStartText = string(pText);
buffer = GCodeLayer->buffer();
pText = buffer->text();
MVC->ProcessControl.GCodeLayerText = string(pText);
buffer = GCodeEnd->buffer();
pText = buffer->text();
MVC->ProcessControl.GCodeEndText = string(pText);
MVC->ProcessControl.SaveXML();
}
void GUI::cb_Save1(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save1_i(o,v);
}

void GUI::cb_accelerationStepsSlider_i(Fl_Value_Slider* o, void*) {
  MVC->NumAccelerationSteps(o->value());
}
void GUI::cb_accelerationStepsSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_accelerationStepsSlider_i(o,v);
}

void GUI::cb_distanceBetweenSpeedStepsSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetDistancePrAccelerationStep(o->value());
}
void GUI::cb_distanceBetweenSpeedStepsSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_distanceBetweenSpeedStepsSlider_i(o,v);
}

void GUI::cb_EnableAccelerationButton_i(Fl_Light_Button* o, void*) {
  MVC->SetEnableAcceleration(o->value());
if(o->value())
{
accelerationStepsSlider->activate();
distanceBetweenSpeedStepsSlider->activate();
UseFirmwareAccelerationButton->activate();
}
else
{
accelerationStepsSlider->deactivate();
distanceBetweenSpeedStepsSlider->deactivate();
UseFirmwareAccelerationButton->deactivate();
};
}
void GUI::cb_EnableAccelerationButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EnableAccelerationButton_i(o,v);
}

void GUI::cb_UseFirmwareAccelerationButton_i(Fl_Light_Button* o, void*) {
  MVC->SetUseFirmwareAcceleration(o->value());

if(o->value())
{
accelerationStepsSlider->deactivate();
distanceBetweenSpeedStepsSlider->label("Distance used to read full speed(mm)");;
}
else
{
accelerationStepsSlider->activate();
distanceBetweenSpeedStepsSlider->label("Distance Pr Acceleration Step (mm)");;
}
accelerationStepsSlider->redraw();
distanceBetweenSpeedStepsSlider->redraw();
}
void GUI::cb_UseFirmwareAccelerationButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_UseFirmwareAccelerationButton_i(o,v);
}

void GUI::cb_MaxPrintSpeedXYSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetMaxPrintSpeedXY(o->value());
}
void GUI::cb_MaxPrintSpeedXYSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MaxPrintSpeedXYSlider_i(o,v);
}

void GUI::cb_MinPrintSpeedZSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetMinPrintSpeedZ(o->value());
}
void GUI::cb_MinPrintSpeedZSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MinPrintSpeedZSlider_i(o,v);
}

void GUI::cb_MinPrintSpeedXYSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetMinPrintSpeedXY(o->value());
}
void GUI::cb_MinPrintSpeedXYSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MinPrintSpeedXYSlider_i(o,v);
}

void GUI::cb_MaxPrintSpeedZSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetMaxPrintSpeedZ(o->value());
}
void GUI::cb_MaxPrintSpeedZSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MaxPrintSpeedZSlider_i(o,v);
}

void GUI::cb_ExtrudedMaterialWidthSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetExtrudedMaterialWidth(o->value());
}
void GUI::cb_ExtrudedMaterialWidthSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ExtrudedMaterialWidthSlider_i(o,v);
}

void GUI::cb_extrusionFactorSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetExtrusionFactor(o->value());
}
void GUI::cb_extrusionFactorSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_extrusionFactorSlider_i(o,v);
}

void GUI::cb_UseIncrementalEcodeButton_i(Fl_Light_Button* o, void*) {
  MVC->SetUseIncrementalEcode(o->value());
}
void GUI::cb_UseIncrementalEcodeButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_UseIncrementalEcodeButton_i(o,v);
}

void GUI::cb_LayerThicknessSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetLayerThickness(o->value());
}
void GUI::cb_LayerThicknessSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_LayerThicknessSlider_i(o,v);
}

void GUI::cb_InfillRotationSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetInfillRotation(o->value());
}
void GUI::cb_InfillRotationSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_InfillRotationSlider_i(o,v);
}

void GUI::cb_InfillRotationPrLayerSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetInfillRotationPrLayer(o->value());
}
void GUI::cb_InfillRotationPrLayerSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_InfillRotationPrLayerSlider_i(o,v);
}

void GUI::cb_InfillDistanceSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetInfillDistance(o->value());
}
void GUI::cb_InfillDistanceSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_InfillDistanceSlider_i(o,v);
}

void GUI::cb_OptimizationSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetOptimization(o->value());
}
void GUI::cb_OptimizationSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_OptimizationSlider_i(o,v);
}

void GUI::cb_ShellOnlyButton_i(Fl_Light_Button* o, void*) {
  MVC->SetShellOnly(o->value());
}
void GUI::cb_ShellOnlyButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ShellOnlyButton_i(o,v);
}

void GUI::cb_ShellCountSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetShellCount(o->value());
}
void GUI::cb_ShellCountSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ShellCountSlider_i(o,v);
}

void GUI::cb_ApronSizeSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetApronSize(o->value());
}
void GUI::cb_ApronSizeSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ApronSizeSlider_i(o,v);
}

void GUI::cb_ApronCoverageXSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetApronCoverageX(o->value());
}
void GUI::cb_ApronCoverageXSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ApronCoverageXSlider_i(o,v);
}

void GUI::cb_ApronHeightSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetApronHeight(o->value());
}
void GUI::cb_ApronHeightSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ApronHeightSlider_i(o,v);
}

void GUI::cb_ApronCoverageYSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetApronCoverageY(o->value());
}
void GUI::cb_ApronCoverageYSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ApronCoverageYSlider_i(o,v);
}

void GUI::cb_ApronEnableButton_i(Fl_Light_Button* o, void*) {
  MVC->SetApronEnable(o->value());
}
void GUI::cb_ApronEnableButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ApronEnableButton_i(o,v);
}

void GUI::cb_ApronDistanceToObjectSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetApronDistanceToObject(o->value());
}
void GUI::cb_ApronDistanceToObjectSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ApronDistanceToObjectSlider_i(o,v);
}

void GUI::cb_ApronInfillDistanceSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetApronInfillDistance(o->value());
}
void GUI::cb_ApronInfillDistanceSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ApronInfillDistanceSlider_i(o,v);
}

void GUI::cb_ApronPreviewButton_i(Fl_Light_Button* o, void*) {
  MVC->SetApronPreview(o->value());
}
void GUI::cb_ApronPreviewButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ApronPreviewButton_i(o,v);
}

void GUI::cb_RaftMaterialPrDistanceRatioSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetRaftMaterialPrDistanceRatio(o->value());
}
void GUI::cb_RaftMaterialPrDistanceRatioSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RaftMaterialPrDistanceRatioSlider_i(o,v);
}

void GUI::cb_RaftRotationSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetRaftRotation(o->value());
}
void GUI::cb_RaftRotationSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RaftRotationSlider_i(o,v);
}

void GUI::cb_RaftBaseDistanceSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetRaftBaseDistance(o->value());
}
void GUI::cb_RaftBaseDistanceSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RaftBaseDistanceSlider_i(o,v);
}

void GUI::cb_RaftBaseThicknessSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetRaftBaseThickness(o->value());
}
void GUI::cb_RaftBaseThicknessSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RaftBaseThicknessSlider_i(o,v);
}

void GUI::cb_RaftBaseLayerCountSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetRaftBaseLayerCount(o->value());
}
void GUI::cb_RaftBaseLayerCountSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RaftBaseLayerCountSlider_i(o,v);
}

void GUI::cb_RaftBaseTemperatureSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetRaftBaseTemperature(o->value());
}
void GUI::cb_RaftBaseTemperatureSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RaftBaseTemperatureSlider_i(o,v);
}

void GUI::cb_RaftSizeSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetRaftSize(o->value());
}
void GUI::cb_RaftSizeSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RaftSizeSlider_i(o,v);
}

void GUI::cb_RaftInterfaceMaterialPrDistanceRatioSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetRaftInterfaceMaterialPrDistanceRatio(o->value());
}
void GUI::cb_RaftInterfaceMaterialPrDistanceRatioSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RaftInterfaceMaterialPrDistanceRatioSlider_i(o,v);
}

void GUI::cb_RaftRotationPrLayerSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetRaftRotationPrLayer(o->value());
}
void GUI::cb_RaftRotationPrLayerSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RaftRotationPrLayerSlider_i(o,v);
}

void GUI::cb_RaftInterfaceDistanceSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetRaftInterfaceDistance(o->value());
}
void GUI::cb_RaftInterfaceDistanceSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RaftInterfaceDistanceSlider_i(o,v);
}

void GUI::cb_RaftInterfaceThicknessSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetRaftBaseThickness(o->value());
}
void GUI::cb_RaftInterfaceThicknessSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RaftInterfaceThicknessSlider_i(o,v);
}

void GUI::cb_RaftInterfaceLayerCountSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SeRaftInterfaceLayerCount(o->value());
}
void GUI::cb_RaftInterfaceLayerCountSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RaftInterfaceLayerCountSlider_i(o,v);
}

void GUI::cb_RaftInterfaceTemperatureSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetRaftInterfaceTemperature(o->value());
}
void GUI::cb_RaftInterfaceTemperatureSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RaftInterfaceTemperatureSlider_i(o,v);
}

void GUI::cb_RaftEnableButton_i(Fl_Light_Button* o, void*) {
  MVC->SetRaftEnable(o->value());
}
void GUI::cb_RaftEnableButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RaftEnableButton_i(o,v);
}

void GUI::cb_Preview_i(Fl_Light_Button* o, void*) {
  MVC->SetApronPreview(o->value());
}
void GUI::cb_Preview(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Preview_i(o,v);
}

void GUI::cb_Load1_i(Fl_Button*, void*) {
  Fl_File_Chooser chooser("\\", "*.gcode", Fl_File_Chooser::SINGLE, "Choose GCode");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
MVC->ReadGCode(dir);
MVC->redraw();
};
}
void GUI::cb_Load1(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->user_data()))->cb_Load1_i(o,v);
}

void GUI::cb_Convert_i(Fl_Button*, void*) {
  MVC->ConvertToGCode();
}
void GUI::cb_Convert(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->user_data()))->cb_Convert_i(o,v);
}

Fl_Menu_Item GUI::menu_Printer[] = {
 {"Min PrintSpeed XY", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Max PrintSpeed XY", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Min PrintSpeed Z", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Max PrintSpeed Z", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* GUI::MinSpeedXY = GUI::menu_Printer + 0;

void GUI::cb_Save2_i(Fl_Button*, void*) {
  Fl_File_Chooser chooser("\\", "*.gcode", Fl_File_Chooser::CREATE, "Choose filename");
chooser.show();
while (chooser.shown())
	Fl::wait();
if(chooser.value() == 0)
	return;
std::string dir(chooser.value());


if(dir.length())
{
Fl_Text_Buffer *buffer = GCodeResult->buffer();

int result = buffer->savefile(chooser.value());

switch(result)
{
case 0:	// Succes
break;
case 1:	//Open for write failed
fl_alert("Error saving GCode file, error creating file.", "OK");
break;
case 2: // Partially saved file
fl_alert("Error saving GCode file, while writing file, is the disk full?.", "OK");
break;
}

MVC->redraw();
};
}
void GUI::cb_Save2(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save2_i(o,v);
}

void GUI::cb_DisplayPolygonsButton_i(Fl_Light_Button* o, void*) {
  MVC->SetDisplayPolygons(o->value());
}
void GUI::cb_DisplayPolygonsButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_DisplayPolygonsButton_i(o,v);
}

void GUI::cb_DisplayWireframeButton_i(Fl_Light_Button* o, void*) {
  MVC->SetDisplayWireframe(o->value());
}
void GUI::cb_DisplayWireframeButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_DisplayWireframeButton_i(o,v);
}

void GUI::cb_DisplayNormalsButton_i(Fl_Light_Button* o, void*) {
  MVC->SetDisplayNormals(o->value());
}
void GUI::cb_DisplayNormalsButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_DisplayNormalsButton_i(o,v);
}

void GUI::cb_DisplayEndpointsButton_i(Fl_Light_Button* o, void*) {
  MVC->SetDisplayEndpoints(o->value());
}
void GUI::cb_DisplayEndpointsButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_DisplayEndpointsButton_i(o,v);
}

void GUI::cb_PolygonValSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetPolygonVal(o->value());
MVC->redraw();
}
void GUI::cb_PolygonValSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_PolygonValSlider_i(o,v);
}

void GUI::cb_PolygonSatSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetPolygonSat(o->value());
MVC->redraw();
}
void GUI::cb_PolygonSatSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_PolygonSatSlider_i(o,v);
}

void GUI::cb_PolygonHueSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetPolygonHue(o->value());
MVC->redraw();
}
void GUI::cb_PolygonHueSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_PolygonHueSlider_i(o,v);
}

void GUI::cb_WireframeValSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetWireframeVal(o->value());
MVC->redraw();
}
void GUI::cb_WireframeValSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_WireframeValSlider_i(o,v);
}

void GUI::cb_WireframeSatSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetWireframeSat(o->value());
MVC->redraw();
}
void GUI::cb_WireframeSatSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_WireframeSatSlider_i(o,v);
}

void GUI::cb_WireframeHueSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetWireframeHue(o->value());
MVC->redraw();
}
void GUI::cb_WireframeHueSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_WireframeHueSlider_i(o,v);
}

void GUI::cb_NormalValSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetNormalsVal(o->value());
MVC->redraw();
}
void GUI::cb_NormalValSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_NormalValSlider_i(o,v);
}

void GUI::cb_NormalSatSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetNormalsSat(o->value());
MVC->redraw();
}
void GUI::cb_NormalSatSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_NormalSatSlider_i(o,v);
}

void GUI::cb_NormalHueSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetNormalsHue(o->value());
MVC->redraw();
}
void GUI::cb_NormalHueSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_NormalHueSlider_i(o,v);
}

void GUI::cb_EndpointValSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetEndpointsVal(o->value());
MVC->redraw();
}
void GUI::cb_EndpointValSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EndpointValSlider_i(o,v);
}

void GUI::cb_EndpointSatSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetEndpointsSat(o->value());
MVC->redraw();
}
void GUI::cb_EndpointSatSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EndpointSatSlider_i(o,v);
}

void GUI::cb_EndpointHueSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetEndpointsHue(o->value());
MVC->redraw();
}
void GUI::cb_EndpointHueSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EndpointHueSlider_i(o,v);
}

void GUI::cb_DisplayBBoxButton_i(Fl_Light_Button* o, void*) {
  MVC->SetDisplayBBox(o->value());
}
void GUI::cb_DisplayBBoxButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_DisplayBBoxButton_i(o,v);
}

void GUI::cb_HighlightSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetHighlight(o->value());
MVC->redraw();
}
void GUI::cb_HighlightSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_HighlightSlider_i(o,v);
}

void GUI::cb_NormalLengthSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetNormalsLength(o->value());
MVC->redraw();
}
void GUI::cb_NormalLengthSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_NormalLengthSlider_i(o,v);
}

void GUI::cb_EndpointSizeSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetEndPointSize(o->value());
MVC->redraw();
}
void GUI::cb_EndpointSizeSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EndpointSizeSlider_i(o,v);
}

void GUI::cb_DisplayWireframeShadedButton_i(Fl_Light_Button* o, void*) {
  MVC->SetDisplayWireframeShaded(o->value());
}
void GUI::cb_DisplayWireframeShadedButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_DisplayWireframeShadedButton_i(o,v);
}

void GUI::cb_DisplayGCodeButton_i(Fl_Light_Button* o, void*) {
  MVC->SetDisplayGCode(o->value());
MVC->redraw();
}
void GUI::cb_DisplayGCodeButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_DisplayGCodeButton_i(o,v);
}

void GUI::cb_GCodeExtrudeValSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetGCodeExtrudeVal(o->value());
MVC->redraw();
}
void GUI::cb_GCodeExtrudeValSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_GCodeExtrudeValSlider_i(o,v);
}

void GUI::cb_GCodeExtrudeSatSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetGCodeExtrudeSat(o->value());
MVC->redraw();
}
void GUI::cb_GCodeExtrudeSatSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_GCodeExtrudeSatSlider_i(o,v);
}

void GUI::cb_GCodeExtrudeHueSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetGCodeExtrudeHue(o->value());
MVC->redraw();
}
void GUI::cb_GCodeExtrudeHueSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_GCodeExtrudeHueSlider_i(o,v);
}

void GUI::cb_LuminanceShowsSpeedButton_i(Fl_Light_Button* o, void*) {
  MVC->SetLuminanceShowsSpeed(o->value());
MVC->redraw();
}
void GUI::cb_LuminanceShowsSpeedButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_LuminanceShowsSpeedButton_i(o,v);
}

void GUI::cb_Crop_i(Fl_Button*, void*) {
  float start = GCodeDrawStartSlider->value();
float end = GCodeDrawEndSlider->value();
GCodeDrawStartSlider->range(start,end);
GCodeDrawEndSlider->range(start,end);
GCodeDrawStartSlider->redraw();
GCodeDrawEndSlider->redraw();
}
void GUI::cb_Crop(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Crop_i(o,v);
}

void GUI::cb_Reset_i(Fl_Button*, void*) {
  GCodeDrawStartSlider->range(0,1);
GCodeDrawEndSlider->range(0,1);
GCodeDrawStartSlider->redraw();
GCodeDrawEndSlider->redraw();
}
void GUI::cb_Reset(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Reset_i(o,v);
}

void GUI::cb_GCodeDrawStartSlider_i(Fl_Slider* o, void*) {
  MVC->SetGCodeDrawStart(o->value());
}
void GUI::cb_GCodeDrawStartSlider(Fl_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_GCodeDrawStartSlider_i(o,v);
}

void GUI::cb_GCodeDrawEndSlider_i(Fl_Slider* o, void*) {
  MVC->SetGCodeDrawEnd(o->value());
}
void GUI::cb_GCodeDrawEndSlider(Fl_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_GCodeDrawEndSlider_i(o,v);
}

void GUI::cb_GCodeMoveValSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetGCodeMoveVal(o->value());
MVC->redraw();
}
void GUI::cb_GCodeMoveValSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_GCodeMoveValSlider_i(o,v);
}

void GUI::cb_GCodeMoveSatSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetGCodeMoveSat(o->value());
MVC->redraw();
}
void GUI::cb_GCodeMoveSatSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_GCodeMoveSatSlider_i(o,v);
}

void GUI::cb_GCodeMoveHueSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetGCodeMoveHue(o->value());
MVC->redraw();
}
void GUI::cb_GCodeMoveHueSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_GCodeMoveHueSlider_i(o,v);
}

void GUI::cb_CuttingPlaneValueSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetCuttingPlaneValue(o->value());
}
void GUI::cb_CuttingPlaneValueSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CuttingPlaneValueSlider_i(o,v);
}

void GUI::cb_DisplayCuttingPlaneButton_i(Fl_Light_Button* o, void*) {
  MVC->SetDisplayCuttingPlane(o->value());
}
void GUI::cb_DisplayCuttingPlaneButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_DisplayCuttingPlaneButton_i(o,v);
}

void GUI::cb_DisplayinFillButton_i(Fl_Light_Button* o, void*) {
  MVC->SetDisplayinFill(o->value());
}
void GUI::cb_DisplayinFillButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_DisplayinFillButton_i(o,v);
}

void GUI::cb_DisplayAllLayersButton_i(Fl_Light_Button* o, void*) {
  MVC->SetDisplayAllLayers(o->value());
}
void GUI::cb_DisplayAllLayersButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_DisplayAllLayersButton_i(o,v);
}

void GUI::cb_Enable_i(Fl_Light_Button* o, void*) {
  MVC->SetEnableLight(0, o->value());
}
void GUI::cb_Enable(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Enable_i(o,v);
}

void GUI::cb_Enable1_i(Fl_Light_Button* o, void*) {
  MVC->SetEnableLight(1, o->value());
}
void GUI::cb_Enable1(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Enable1_i(o,v);
}

void GUI::cb_Enable2_i(Fl_Light_Button* o, void*) {
  MVC->SetEnableLight(2, o->value());
}
void GUI::cb_Enable2(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Enable2_i(o,v);
}

void GUI::cb_Enable3_i(Fl_Light_Button* o, void*) {
  MVC->SetEnableLight(3, o->value());
}
void GUI::cb_Enable3(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Enable3_i(o,v);
}

void GUI::cb_ExamineSlider_i(Fl_Value_Slider* o, void*) {
  MVC->SetExamine(o->value());
}
void GUI::cb_ExamineSlider(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->user_data()))->cb_ExamineSlider_i(o,v);
}

void GUI::cb_DisplayDebuginFillButton_i(Fl_Light_Button* o, void*) {
  MVC->SetDisplayDebuginFill(o->value());
}
void GUI::cb_DisplayDebuginFillButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->user_data()))->cb_DisplayDebuginFillButton_i(o,v);
}

void GUI::cb_DisplayDebugButton_i(Fl_Light_Button* o, void*) {
  if(o->value())
{
DisplayDebuginFillButton->show();
ExamineSlider->show();
}
else
{
DisplayDebuginFillButton->hide();
ExamineSlider->hide();
}


MVC->redraw();
}
void GUI::cb_DisplayDebugButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->user_data()))->cb_DisplayDebugButton_i(o,v);
}

void GUI::cb_DrawVertexNumbersButton_i(Fl_Light_Button* o, void*) {
  MVC->SetDrawVertexNumbers(o->value());
}
void GUI::cb_DrawVertexNumbersButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->user_data()))->cb_DrawVertexNumbersButton_i(o,v);
}

void GUI::cb_DrawLineNumbersButton_i(Fl_Light_Button* o, void*) {
  MVC->SetDrawLineNumbers(o->value());
}
void GUI::cb_DrawLineNumbersButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->user_data()))->cb_DrawLineNumbersButton_i(o,v);
}

void GUI::cb_ConnectToPrinterButton_i(Fl_Light_Button* o, void*) {
  MVC->ConnectToPrinter(o->value());
}
void GUI::cb_ConnectToPrinterButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->user_data()))->cb_ConnectToPrinterButton_i(o,v);
}

void GUI::cb_PrintButton_i(Fl_Light_Button* o, void*) {
  if(o->value())
{
o->label("Pause");
MVC->Print();
}
else
{
o->label("Print");
};
}
void GUI::cb_PrintButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->user_data()))->cb_PrintButton_i(o,v);
}

void GUI::cb_SwitchHeatOnButton_i(Fl_Light_Button* o, void*) {
  MVC->SwitchHeat(o->value(), TargetTempText->value());
}
void GUI::cb_SwitchHeatOnButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_SwitchHeatOnButton_i(o,v);
}

void GUI::cb_TargetTempText_i(Fl_Value_Input* o, void*) {
  MVC->SetTargetTemp(o->value());
}
void GUI::cb_TargetTempText(Fl_Value_Input* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_TargetTempText_i(o,v);
}

void GUI::cb_RunExtruderButton_i(Fl_Light_Button*, void*) {
  MVC->RunExtruder();
}
void GUI::cb_RunExtruderButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_RunExtruderButton_i(o,v);
}

void GUI::cb_SetExtruderDirectionButton_i(Fl_Light_Button* o, void*) {
  MVC->SetExtruderDirection(o->value());
}
void GUI::cb_SetExtruderDirectionButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_SetExtruderDirectionButton_i(o,v);
}

void GUI::cb_Speed_i(Fl_Value_Slider* o, void*) {
  MVC->SetExtruderSpeed(o->value());
}
void GUI::cb_Speed(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Speed_i(o,v);
}

void GUI::cb_Length_i(Fl_Value_Slider* o, void*) {
  MVC->SetExtruderLength(o->value());
}
void GUI::cb_Length(Fl_Value_Slider* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Length_i(o,v);
}

void GUI::cb_Send_i(Fl_Button*, void*) {
  MVC->SendNow(GCodeInput->value());
}
void GUI::cb_Send(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Send_i(o,v);
}

void GUI::cb_ContinueButton_i(Fl_Light_Button*, void*) {
  MVC->Continue();
}
void GUI::cb_ContinueButton(Fl_Light_Button* o, void* v) {
  ((GUI*)(o->parent()->parent()->parent()->user_data()))->cb_ContinueButton_i(o,v);
}

GUI::GUI() {
  { mainWindow = new Fl_Double_Window(1379, 842, "RepSnapper by Kulitorum www.kulitorum.com");
    mainWindow->box(FL_UP_BOX);
    mainWindow->color((Fl_Color)FL_FOREGROUND_COLOR);
    mainWindow->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
    mainWindow->labelsize(12);
    mainWindow->user_data((void*)(this));
    { MVC = new ModelViewController(10, 20, 815, 815, "An instace of ModelViewController");
      MVC->box(FL_UP_BOX);
      MVC->color((Fl_Color)FL_BACKGROUND_COLOR);
      MVC->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      MVC->labeltype(FL_NORMAL_LABEL);
      MVC->labelfont(0);
      MVC->labelsize(14);
      MVC->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      MVC->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      MVC->when(FL_WHEN_RELEASE);
    } // ModelViewController* MVC
    { Tabs = new Fl_Tabs(830, 20, 550, 815);
      Tabs->align(FL_ALIGN_TOP_LEFT);
      { Fl_Group* o = new Fl_Group(830, 40, 545, 795, "Input file");
        o->hide();
        { Fl_Button* o = new Fl_Button(845, 50, 145, 25, "Load STL");
          o->callback((Fl_Callback*)cb_Load);
        } // Fl_Button* o
        { FixSTLerrorsButton = new Fl_Light_Button(995, 50, 135, 25, "Fix STL errors");
          FixSTLerrorsButton->value(1);
          FixSTLerrorsButton->selection_color((Fl_Color)FL_GREEN);
          FixSTLerrorsButton->callback((Fl_Callback*)cb_FixSTLerrorsButton);
        } // Fl_Light_Button* FixSTLerrorsButton
        { Fl_Button* o = new Fl_Button(845, 80, 145, 25, "Save STL");
          o->callback((Fl_Callback*)cb_Save);
          o->deactivate();
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(845, 110, 145, 25, "Scale model");
          o->callback((Fl_Callback*)cb_Scale);
          o->deactivate();
        } // Fl_Button* o
        { Fl_Group* o = new Fl_Group(840, 775, 535, 50, "Object rotation");
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)FL_DARK3);
          { AutoRotateButton = new Fl_Button(850, 785, 125, 25, "Auto rotate");
            AutoRotateButton->callback((Fl_Callback*)cb_AutoRotateButton);
          } // Fl_Button* AutoRotateButton
          { RotateXButton = new Fl_Button(980, 785, 125, 25, "Rotate X");
            RotateXButton->callback((Fl_Callback*)cb_RotateXButton);
          } // Fl_Button* RotateXButton
          { RotateYButton = new Fl_Button(1110, 785, 125, 25, "Rotate Y");
            RotateYButton->callback((Fl_Callback*)cb_RotateYButton);
          } // Fl_Button* RotateYButton
          { RotateZButton = new Fl_Button(1240, 785, 125, 25, "Rotate Z");
            RotateZButton->callback((Fl_Callback*)cb_RotateZButton);
          } // Fl_Button* RotateZButton
          o->end();
        } // Fl_Group* o
        { Fl_Button* o = new Fl_Button(1170, 80, 185, 25, "Save settings");
          o->callback((Fl_Callback*)cb_Save1);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(830, 40, 545, 795, "Printer definition");
        o->hide();
        { Fl_Group* o = new Fl_Group(840, 65, 230, 40, "Build volume (mm)");
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)FL_DARK3);
          { VolumeX = new Fl_Value_Input(860, 76, 45, 23, "X");
            VolumeX->maximum(5000);
            VolumeX->step(1);
            VolumeX->value(200);
          } // Fl_Value_Input* VolumeX
          { VolumeY = new Fl_Value_Input(935, 76, 45, 23, "Y");
            VolumeY->maximum(5000);
            VolumeY->value(200);
          } // Fl_Value_Input* VolumeY
          { VolumeZ = new Fl_Value_Input(1010, 76, 45, 23, "Z");
            VolumeZ->maximum(5000);
            VolumeZ->value(140);
          } // Fl_Value_Input* VolumeZ
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(1220, 65, 155, 40, "Print margin  (mm)");
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)FL_DARK3);
          { MarginX = new Fl_Value_Input(1245, 76, 45, 23, "X");
            MarginX->maximum(100);
            MarginX->step(1);
            MarginX->value(10);
          } // Fl_Value_Input* MarginX
          { MarginY = new Fl_Value_Input(1320, 76, 45, 23, "Y");
            MarginY->maximum(100);
            MarginY->step(1);
            MarginY->value(10);
          } // Fl_Value_Input* MarginY
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(840, 530, 535, 120, "Acceleration");
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)FL_DARK3);
          { accelerationStepsSlider = new Fl_Value_Slider(850, 580, 515, 20, "Number of acceleration steps");
            accelerationStepsSlider->type(5);
            accelerationStepsSlider->selection_color((Fl_Color)2);
            accelerationStepsSlider->maximum(10);
            accelerationStepsSlider->step(1);
            accelerationStepsSlider->value(5);
            accelerationStepsSlider->textsize(14);
            accelerationStepsSlider->callback((Fl_Callback*)cb_accelerationStepsSlider);
            accelerationStepsSlider->align(FL_ALIGN_TOP_LEFT);
            accelerationStepsSlider->deactivate();
          } // Fl_Value_Slider* accelerationStepsSlider
          { distanceBetweenSpeedStepsSlider = new Fl_Value_Slider(850, 620, 515, 20, "Distance used to read full speed(mm)");
            distanceBetweenSpeedStepsSlider->type(5);
            distanceBetweenSpeedStepsSlider->selection_color((Fl_Color)2);
            distanceBetweenSpeedStepsSlider->maximum(10);
            distanceBetweenSpeedStepsSlider->value(0.1);
            distanceBetweenSpeedStepsSlider->textsize(14);
            distanceBetweenSpeedStepsSlider->callback((Fl_Callback*)cb_distanceBetweenSpeedStepsSlider);
            distanceBetweenSpeedStepsSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* distanceBetweenSpeedStepsSlider
          { EnableAccelerationButton = new Fl_Light_Button(850, 540, 255, 20, "Enable Acceleration");
            EnableAccelerationButton->selection_color((Fl_Color)FL_GREEN);
            EnableAccelerationButton->callback((Fl_Callback*)cb_EnableAccelerationButton);
          } // Fl_Light_Button* EnableAccelerationButton
          { UseFirmwareAccelerationButton = new Fl_Light_Button(1110, 540, 255, 20, "Use Firmware Acceleration");
            UseFirmwareAccelerationButton->selection_color((Fl_Color)FL_GREEN);
            UseFirmwareAccelerationButton->callback((Fl_Callback*)cb_UseFirmwareAccelerationButton);
          } // Fl_Light_Button* UseFirmwareAccelerationButton
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(840, 330, 535, 170, "Print speeds");
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)FL_DARK3);
          { MaxPrintSpeedXYSlider = new Fl_Value_Slider(850, 390, 515, 20, "Max PrintSpeed XY (mm/minute)");
            MaxPrintSpeedXYSlider->type(5);
            MaxPrintSpeedXYSlider->selection_color((Fl_Color)2);
            MaxPrintSpeedXYSlider->maximum(8000);
            MaxPrintSpeedXYSlider->step(100);
            MaxPrintSpeedXYSlider->value(4000);
            MaxPrintSpeedXYSlider->textsize(14);
            MaxPrintSpeedXYSlider->callback((Fl_Callback*)cb_MaxPrintSpeedXYSlider);
            MaxPrintSpeedXYSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* MaxPrintSpeedXYSlider
          { MinPrintSpeedZSlider = new Fl_Value_Slider(850, 430, 515, 20, "Min PrintSpeed Z (mm/minute)");
            MinPrintSpeedZSlider->type(5);
            MinPrintSpeedZSlider->selection_color((Fl_Color)2);
            MinPrintSpeedZSlider->minimum(1);
            MinPrintSpeedZSlider->maximum(2500);
            MinPrintSpeedZSlider->step(10);
            MinPrintSpeedZSlider->value(50);
            MinPrintSpeedZSlider->textsize(14);
            MinPrintSpeedZSlider->callback((Fl_Callback*)cb_MinPrintSpeedZSlider);
            MinPrintSpeedZSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* MinPrintSpeedZSlider
          { MinPrintSpeedXYSlider = new Fl_Value_Slider(850, 350, 515, 20, "Min PrintSpeed XY (mm/minute)");
            MinPrintSpeedXYSlider->type(5);
            MinPrintSpeedXYSlider->selection_color((Fl_Color)2);
            MinPrintSpeedXYSlider->maximum(8000);
            MinPrintSpeedXYSlider->step(100);
            MinPrintSpeedXYSlider->value(1000);
            MinPrintSpeedXYSlider->textsize(14);
            MinPrintSpeedXYSlider->callback((Fl_Callback*)cb_MinPrintSpeedXYSlider);
            MinPrintSpeedXYSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* MinPrintSpeedXYSlider
          { MaxPrintSpeedZSlider = new Fl_Value_Slider(850, 470, 515, 20, "Max PrintSpeed Z (mm/minute)");
            MaxPrintSpeedZSlider->type(5);
            MaxPrintSpeedZSlider->selection_color((Fl_Color)2);
            MaxPrintSpeedZSlider->maximum(2500);
            MaxPrintSpeedZSlider->step(10);
            MaxPrintSpeedZSlider->value(150);
            MaxPrintSpeedZSlider->textsize(14);
            MaxPrintSpeedZSlider->callback((Fl_Callback*)cb_MaxPrintSpeedZSlider);
            MaxPrintSpeedZSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* MaxPrintSpeedZSlider
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(840, 135, 535, 160, "Extruder");
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)FL_DARK3);
          { ExtrudedMaterialWidthSlider = new Fl_Value_Slider(850, 190, 515, 20, "Extruded material width");
            ExtrudedMaterialWidthSlider->type(5);
            ExtrudedMaterialWidthSlider->selection_color((Fl_Color)2);
            ExtrudedMaterialWidthSlider->value(0.7);
            ExtrudedMaterialWidthSlider->textsize(14);
            ExtrudedMaterialWidthSlider->callback((Fl_Callback*)cb_ExtrudedMaterialWidthSlider);
            ExtrudedMaterialWidthSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* ExtrudedMaterialWidthSlider
          { extrusionFactorSlider = new Fl_Value_Slider(850, 230, 515, 20, "Extrusion multiplier");
            extrusionFactorSlider->type(5);
            extrusionFactorSlider->selection_color((Fl_Color)2);
            extrusionFactorSlider->maximum(2);
            extrusionFactorSlider->value(1);
            extrusionFactorSlider->textsize(14);
            extrusionFactorSlider->callback((Fl_Callback*)cb_extrusionFactorSlider);
            extrusionFactorSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* extrusionFactorSlider
          { UseIncrementalEcodeButton = new Fl_Light_Button(850, 145, 515, 20, "Use incremental ecode (for seperate extruder controller)");
            UseIncrementalEcodeButton->selection_color((Fl_Color)FL_GREEN);
            UseIncrementalEcodeButton->callback((Fl_Callback*)cb_UseIncrementalEcodeButton);
          } // Fl_Light_Button* UseIncrementalEcodeButton
          { LayerThicknessSlider = new Fl_Value_Slider(850, 270, 515, 20, "Layer Thickness");
            LayerThicknessSlider->type(5);
            LayerThicknessSlider->selection_color((Fl_Color)2);
            LayerThicknessSlider->minimum(0.1);
            LayerThicknessSlider->maximum(3);
            LayerThicknessSlider->step(0.1);
            LayerThicknessSlider->value(0.4);
            LayerThicknessSlider->textsize(14);
            LayerThicknessSlider->callback((Fl_Callback*)cb_LayerThicknessSlider);
            LayerThicknessSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* LayerThicknessSlider
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(830, 40, 545, 795, "Infill");
        o->hide();
        { Fl_Group* o = new Fl_Group(840, 65, 535, 215, "Infill");
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)FL_DARK3);
          { InfillRotationSlider = new Fl_Value_Slider(850, 125, 515, 20, "Rotation");
            InfillRotationSlider->type(5);
            InfillRotationSlider->selection_color((Fl_Color)2);
            InfillRotationSlider->maximum(360);
            InfillRotationSlider->step(1);
            InfillRotationSlider->value(45);
            InfillRotationSlider->textsize(14);
            InfillRotationSlider->callback((Fl_Callback*)cb_InfillRotationSlider);
            InfillRotationSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* InfillRotationSlider
          { InfillRotationPrLayerSlider = new Fl_Value_Slider(850, 165, 515, 20, "InFill Rotation pr. Layer");
            InfillRotationPrLayerSlider->type(5);
            InfillRotationPrLayerSlider->selection_color((Fl_Color)2);
            InfillRotationPrLayerSlider->maximum(360);
            InfillRotationPrLayerSlider->step(1);
            InfillRotationPrLayerSlider->value(90);
            InfillRotationPrLayerSlider->textsize(14);
            InfillRotationPrLayerSlider->callback((Fl_Callback*)cb_InfillRotationPrLayerSlider);
            InfillRotationPrLayerSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* InfillRotationPrLayerSlider
          { InfillDistanceSlider = new Fl_Value_Slider(850, 205, 515, 20, "Infill Distance");
            InfillDistanceSlider->type(5);
            InfillDistanceSlider->selection_color((Fl_Color)2);
            InfillDistanceSlider->minimum(0.1);
            InfillDistanceSlider->maximum(10);
            InfillDistanceSlider->step(0.1);
            InfillDistanceSlider->value(2);
            InfillDistanceSlider->textsize(14);
            InfillDistanceSlider->callback((Fl_Callback*)cb_InfillDistanceSlider);
            InfillDistanceSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* InfillDistanceSlider
          { OptimizationSlider = new Fl_Value_Slider(850, 250, 515, 20, "Optimize");
            OptimizationSlider->type(5);
            OptimizationSlider->selection_color((Fl_Color)2);
            OptimizationSlider->value(0.01);
            OptimizationSlider->textsize(14);
            OptimizationSlider->callback((Fl_Callback*)cb_OptimizationSlider);
            OptimizationSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* OptimizationSlider
          { ShellOnlyButton = new Fl_Light_Button(850, 85, 255, 20, "Shell Only - no infill");
            ShellOnlyButton->selection_color((Fl_Color)FL_GREEN);
            ShellOnlyButton->callback((Fl_Callback*)cb_ShellOnlyButton);
          } // Fl_Light_Button* ShellOnlyButton
          { ShellCountSlider = new Fl_Value_Slider(1110, 85, 255, 20, "Shell count");
            ShellCountSlider->type(5);
            ShellCountSlider->selection_color((Fl_Color)2);
            ShellCountSlider->minimum(1);
            ShellCountSlider->maximum(10);
            ShellCountSlider->step(1);
            ShellCountSlider->value(1);
            ShellCountSlider->textsize(14);
            ShellCountSlider->callback((Fl_Callback*)cb_ShellCountSlider);
            ShellCountSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* ShellCountSlider
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(830, 40, 545, 795, "Apron");
        o->color((Fl_Color)FL_DARK1);
        o->hide();
        { Fl_Group* o = new Fl_Group(840, 65, 530, 305, "Size");
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)FL_DARK3);
          { ApronSizeSlider = new Fl_Value_Slider(850, 125, 510, 20, "Size");
            ApronSizeSlider->tooltip("How much larget then the print should the Raft be.");
            ApronSizeSlider->type(5);
            ApronSizeSlider->selection_color((Fl_Color)2);
            ApronSizeSlider->minimum(0.1);
            ApronSizeSlider->maximum(2);
            ApronSizeSlider->step(0.1);
            ApronSizeSlider->value(1.3);
            ApronSizeSlider->textsize(14);
            ApronSizeSlider->callback((Fl_Callback*)cb_ApronSizeSlider);
            ApronSizeSlider->align(FL_ALIGN_TOP_LEFT);
            ApronSizeSlider->deactivate();
          } // Fl_Value_Slider* ApronSizeSlider
          { ApronCoverageXSlider = new Fl_Value_Slider(850, 205, 510, 20, "Coverage X axis");
            ApronCoverageXSlider->type(5);
            ApronCoverageXSlider->selection_color((Fl_Color)2);
            ApronCoverageXSlider->minimum(1);
            ApronCoverageXSlider->maximum(100);
            ApronCoverageXSlider->step(1);
            ApronCoverageXSlider->value(30);
            ApronCoverageXSlider->textsize(14);
            ApronCoverageXSlider->callback((Fl_Callback*)cb_ApronCoverageXSlider);
            ApronCoverageXSlider->align(FL_ALIGN_TOP_LEFT);
            ApronCoverageXSlider->deactivate();
          } // Fl_Value_Slider* ApronCoverageXSlider
          { ApronHeightSlider = new Fl_Value_Slider(850, 165, 510, 20, "Height");
            ApronHeightSlider->type(5);
            ApronHeightSlider->selection_color((Fl_Color)2);
            ApronHeightSlider->minimum(1);
            ApronHeightSlider->maximum(30);
            ApronHeightSlider->step(1);
            ApronHeightSlider->value(8);
            ApronHeightSlider->textsize(14);
            ApronHeightSlider->callback((Fl_Callback*)cb_ApronHeightSlider);
            ApronHeightSlider->align(FL_ALIGN_TOP_LEFT);
            ApronHeightSlider->deactivate();
          } // Fl_Value_Slider* ApronHeightSlider
          { ApronCoverageYSlider = new Fl_Value_Slider(850, 245, 510, 20, "Coverage Y axis");
            ApronCoverageYSlider->type(5);
            ApronCoverageYSlider->selection_color((Fl_Color)2);
            ApronCoverageYSlider->minimum(1);
            ApronCoverageYSlider->maximum(100);
            ApronCoverageYSlider->step(1);
            ApronCoverageYSlider->value(30);
            ApronCoverageYSlider->textsize(14);
            ApronCoverageYSlider->callback((Fl_Callback*)cb_ApronCoverageYSlider);
            ApronCoverageYSlider->align(FL_ALIGN_TOP_LEFT);
            ApronCoverageYSlider->deactivate();
          } // Fl_Value_Slider* ApronCoverageYSlider
          { ApronEnableButton = new Fl_Light_Button(850, 85, 250, 20, "Enable");
            ApronEnableButton->callback((Fl_Callback*)cb_ApronEnableButton);
          } // Fl_Light_Button* ApronEnableButton
          { ApronDistanceToObjectSlider = new Fl_Value_Slider(850, 285, 510, 20, "Distance to object");
            ApronDistanceToObjectSlider->type(5);
            ApronDistanceToObjectSlider->selection_color((Fl_Color)2);
            ApronDistanceToObjectSlider->minimum(-1);
            ApronDistanceToObjectSlider->maximum(3);
            ApronDistanceToObjectSlider->step(0.1);
            ApronDistanceToObjectSlider->value(0.5);
            ApronDistanceToObjectSlider->textsize(14);
            ApronDistanceToObjectSlider->callback((Fl_Callback*)cb_ApronDistanceToObjectSlider);
            ApronDistanceToObjectSlider->align(FL_ALIGN_TOP_LEFT);
            ApronDistanceToObjectSlider->deactivate();
          } // Fl_Value_Slider* ApronDistanceToObjectSlider
          { ApronInfillDistanceSlider = new Fl_Value_Slider(850, 325, 510, 20, "Infill Distance");
            ApronInfillDistanceSlider->type(5);
            ApronInfillDistanceSlider->selection_color((Fl_Color)2);
            ApronInfillDistanceSlider->minimum(0.1);
            ApronInfillDistanceSlider->maximum(10);
            ApronInfillDistanceSlider->step(0.1);
            ApronInfillDistanceSlider->value(2);
            ApronInfillDistanceSlider->textsize(14);
            ApronInfillDistanceSlider->callback((Fl_Callback*)cb_ApronInfillDistanceSlider);
            ApronInfillDistanceSlider->align(FL_ALIGN_TOP_LEFT);
            ApronInfillDistanceSlider->deactivate();
          } // Fl_Value_Slider* ApronInfillDistanceSlider
          { ApronPreviewButton = new Fl_Light_Button(1105, 85, 255, 20, "Preview");
            ApronPreviewButton->callback((Fl_Callback*)cb_ApronPreviewButton);
            ApronPreviewButton->deactivate();
          } // Fl_Light_Button* ApronPreviewButton
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(830, 40, 545, 795, "Raft");
        o->color((Fl_Color)FL_DARK1);
        o->hide();
        { Fl_Group* o = new Fl_Group(835, 220, 535, 270, "Base");
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)FL_DARK3);
          { RaftMaterialPrDistanceRatioSlider = new Fl_Value_Slider(845, 285, 515, 20, "Material pr. distance ratio");
            RaftMaterialPrDistanceRatioSlider->type(5);
            RaftMaterialPrDistanceRatioSlider->selection_color((Fl_Color)2);
            RaftMaterialPrDistanceRatioSlider->minimum(0.1);
            RaftMaterialPrDistanceRatioSlider->maximum(3);
            RaftMaterialPrDistanceRatioSlider->step(0.1);
            RaftMaterialPrDistanceRatioSlider->value(1.75);
            RaftMaterialPrDistanceRatioSlider->textsize(14);
            RaftMaterialPrDistanceRatioSlider->callback((Fl_Callback*)cb_RaftMaterialPrDistanceRatioSlider);
            RaftMaterialPrDistanceRatioSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* RaftMaterialPrDistanceRatioSlider
          { RaftRotationSlider = new Fl_Value_Slider(845, 325, 515, 20, "Rotation");
            RaftRotationSlider->type(5);
            RaftRotationSlider->selection_color((Fl_Color)2);
            RaftRotationSlider->maximum(360);
            RaftRotationSlider->step(1);
            RaftRotationSlider->value(90);
            RaftRotationSlider->textsize(14);
            RaftRotationSlider->callback((Fl_Callback*)cb_RaftRotationSlider);
            RaftRotationSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* RaftRotationSlider
          { RaftBaseDistanceSlider = new Fl_Value_Slider(845, 370, 515, 20, "Distance between lines");
            RaftBaseDistanceSlider->tooltip("Distance between the base layer\'s lines");
            RaftBaseDistanceSlider->type(5);
            RaftBaseDistanceSlider->selection_color((Fl_Color)2);
            RaftBaseDistanceSlider->minimum(0.1);
            RaftBaseDistanceSlider->maximum(10);
            RaftBaseDistanceSlider->step(0.1);
            RaftBaseDistanceSlider->value(2);
            RaftBaseDistanceSlider->textsize(14);
            RaftBaseDistanceSlider->callback((Fl_Callback*)cb_RaftBaseDistanceSlider);
            RaftBaseDistanceSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* RaftBaseDistanceSlider
          { RaftBaseThicknessSlider = new Fl_Value_Slider(845, 415, 515, 20, "Thinkness ratio");
            RaftBaseThicknessSlider->tooltip("How much thicker or thinner then a normal layer should the raft base be.");
            RaftBaseThicknessSlider->type(5);
            RaftBaseThicknessSlider->selection_color((Fl_Color)2);
            RaftBaseThicknessSlider->minimum(0.1);
            RaftBaseThicknessSlider->maximum(3);
            RaftBaseThicknessSlider->step(0.1);
            RaftBaseThicknessSlider->value(1);
            RaftBaseThicknessSlider->textsize(14);
            RaftBaseThicknessSlider->callback((Fl_Callback*)cb_RaftBaseThicknessSlider);
            RaftBaseThicknessSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* RaftBaseThicknessSlider
          { RaftBaseLayerCountSlider = new Fl_Value_Slider(845, 245, 515, 20, "Number of Base layers");
            RaftBaseLayerCountSlider->type(5);
            RaftBaseLayerCountSlider->selection_color((Fl_Color)2);
            RaftBaseLayerCountSlider->maximum(5);
            RaftBaseLayerCountSlider->step(1);
            RaftBaseLayerCountSlider->value(1);
            RaftBaseLayerCountSlider->textsize(14);
            RaftBaseLayerCountSlider->callback((Fl_Callback*)cb_RaftBaseLayerCountSlider);
            RaftBaseLayerCountSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* RaftBaseLayerCountSlider
          { RaftBaseTemperatureSlider = new Fl_Value_Slider(845, 460, 515, 20, "Temperature ratio");
            RaftBaseTemperatureSlider->tooltip("To make the flow better, you may want to print the base layers hotter then th\
e rest of the print.");
            RaftBaseTemperatureSlider->type(5);
            RaftBaseTemperatureSlider->selection_color((Fl_Color)2);
            RaftBaseTemperatureSlider->minimum(0.1);
            RaftBaseTemperatureSlider->maximum(3);
            RaftBaseTemperatureSlider->value(1.1);
            RaftBaseTemperatureSlider->textsize(14);
            RaftBaseTemperatureSlider->callback((Fl_Callback*)cb_RaftBaseTemperatureSlider);
            RaftBaseTemperatureSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* RaftBaseTemperatureSlider
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(835, 145, 535, 55, "Size");
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)FL_DARK3);
          { RaftSizeSlider = new Fl_Value_Slider(845, 170, 515, 20, "Size");
            RaftSizeSlider->tooltip("How much larget then the print should the Raft be.");
            RaftSizeSlider->type(5);
            RaftSizeSlider->selection_color((Fl_Color)2);
            RaftSizeSlider->minimum(1);
            RaftSizeSlider->maximum(3);
            RaftSizeSlider->value(1.33);
            RaftSizeSlider->textsize(14);
            RaftSizeSlider->callback((Fl_Callback*)cb_RaftSizeSlider);
            RaftSizeSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* RaftSizeSlider
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(835, 520, 535, 285, "Interface");
          o->tooltip("This is the layer(s) connecting to the print itself. Unlike the Base layer, t\
hey should be \"nice\" and with a normal extrusion ratio.");
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)FL_DARK3);
          { RaftInterfaceMaterialPrDistanceRatioSlider = new Fl_Value_Slider(845, 595, 515, 20, "Material pr. distance ratio");
            RaftInterfaceMaterialPrDistanceRatioSlider->type(5);
            RaftInterfaceMaterialPrDistanceRatioSlider->selection_color((Fl_Color)2);
            RaftInterfaceMaterialPrDistanceRatioSlider->minimum(0.1);
            RaftInterfaceMaterialPrDistanceRatioSlider->maximum(3);
            RaftInterfaceMaterialPrDistanceRatioSlider->step(0.1);
            RaftInterfaceMaterialPrDistanceRatioSlider->value(1);
            RaftInterfaceMaterialPrDistanceRatioSlider->textsize(14);
            RaftInterfaceMaterialPrDistanceRatioSlider->callback((Fl_Callback*)cb_RaftInterfaceMaterialPrDistanceRatioSlider);
            RaftInterfaceMaterialPrDistanceRatioSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* RaftInterfaceMaterialPrDistanceRatioSlider
          { RaftRotationPrLayerSlider = new Fl_Value_Slider(845, 640, 515, 20, "Rotation pr. layer");
            RaftRotationPrLayerSlider->type(5);
            RaftRotationPrLayerSlider->selection_color((Fl_Color)2);
            RaftRotationPrLayerSlider->maximum(360);
            RaftRotationPrLayerSlider->step(1);
            RaftRotationPrLayerSlider->value(90);
            RaftRotationPrLayerSlider->textsize(14);
            RaftRotationPrLayerSlider->callback((Fl_Callback*)cb_RaftRotationPrLayerSlider);
            RaftRotationPrLayerSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* RaftRotationPrLayerSlider
          { RaftInterfaceDistanceSlider = new Fl_Value_Slider(845, 685, 515, 20, "Distance between lines");
            RaftInterfaceDistanceSlider->tooltip("Distance between the base layer\'s lines");
            RaftInterfaceDistanceSlider->type(5);
            RaftInterfaceDistanceSlider->selection_color((Fl_Color)2);
            RaftInterfaceDistanceSlider->minimum(0.1);
            RaftInterfaceDistanceSlider->maximum(10);
            RaftInterfaceDistanceSlider->step(0.1);
            RaftInterfaceDistanceSlider->value(2);
            RaftInterfaceDistanceSlider->textsize(14);
            RaftInterfaceDistanceSlider->callback((Fl_Callback*)cb_RaftInterfaceDistanceSlider);
            RaftInterfaceDistanceSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* RaftInterfaceDistanceSlider
          { RaftInterfaceThicknessSlider = new Fl_Value_Slider(845, 730, 515, 20, "Thinkness ratio");
            RaftInterfaceThicknessSlider->tooltip("How much thicker or thinner then a normal layer should the raft base be.");
            RaftInterfaceThicknessSlider->type(5);
            RaftInterfaceThicknessSlider->selection_color((Fl_Color)2);
            RaftInterfaceThicknessSlider->minimum(0.1);
            RaftInterfaceThicknessSlider->maximum(3);
            RaftInterfaceThicknessSlider->step(0.1);
            RaftInterfaceThicknessSlider->value(1);
            RaftInterfaceThicknessSlider->textsize(14);
            RaftInterfaceThicknessSlider->callback((Fl_Callback*)cb_RaftInterfaceThicknessSlider);
            RaftInterfaceThicknessSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* RaftInterfaceThicknessSlider
          { RaftInterfaceLayerCountSlider = new Fl_Value_Slider(845, 550, 515, 20, "Number of interface layers");
            RaftInterfaceLayerCountSlider->type(5);
            RaftInterfaceLayerCountSlider->selection_color((Fl_Color)2);
            RaftInterfaceLayerCountSlider->maximum(5);
            RaftInterfaceLayerCountSlider->step(1);
            RaftInterfaceLayerCountSlider->value(2);
            RaftInterfaceLayerCountSlider->textsize(14);
            RaftInterfaceLayerCountSlider->callback((Fl_Callback*)cb_RaftInterfaceLayerCountSlider);
            RaftInterfaceLayerCountSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* RaftInterfaceLayerCountSlider
          { RaftInterfaceTemperatureSlider = new Fl_Value_Slider(845, 775, 515, 20, "Temperature ratio");
            RaftInterfaceTemperatureSlider->tooltip("To make the flow better, you may want to print the base layers hotter then th\
e rest of the print.");
            RaftInterfaceTemperatureSlider->type(5);
            RaftInterfaceTemperatureSlider->selection_color((Fl_Color)2);
            RaftInterfaceTemperatureSlider->minimum(0.1);
            RaftInterfaceTemperatureSlider->maximum(3);
            RaftInterfaceTemperatureSlider->value(1.1);
            RaftInterfaceTemperatureSlider->textsize(14);
            RaftInterfaceTemperatureSlider->callback((Fl_Callback*)cb_RaftInterfaceTemperatureSlider);
            RaftInterfaceTemperatureSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* RaftInterfaceTemperatureSlider
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(835, 60, 535, 55, "Size");
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)FL_DARK3);
          { RaftEnableButton = new Fl_Light_Button(840, 80, 255, 25, "Enable");
            RaftEnableButton->callback((Fl_Callback*)cb_RaftEnableButton);
          } // Fl_Light_Button* RaftEnableButton
          { Fl_Light_Button* o = new Fl_Light_Button(1100, 80, 255, 25, "Preview");
            o->callback((Fl_Callback*)cb_Preview);
            o->deactivate();
          } // Fl_Light_Button* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(830, 40, 545, 795, "GCode");
        o->hide();
        { Fl_Button* o = new Fl_Button(835, 90, 145, 25, "Load Gcode");
          o->callback((Fl_Callback*)cb_Load1);
        } // Fl_Button* o
        { GCodeLengthText = new Fl_Output(985, 91, 225, 24);
        } // Fl_Output* GCodeLengthText
        { Fl_Button* o = new Fl_Button(835, 60, 145, 25, "Convert to GCode");
          o->callback((Fl_Callback*)cb_Convert);
        } // Fl_Button* o
        { Fl_Tabs* o = new Fl_Tabs(830, 120, 545, 715);
          { Fl_Group* o = new Fl_Group(830, 140, 545, 695, "Start code");
            { Fl_Text_Editor* o = GCodeStart = new Fl_Text_Editor(830, 140, 530, 605);
              Fl_Text_Buffer *startbuff = new Fl_Text_Buffer();
              o->buffer(startbuff);
            } // Fl_Text_Editor* GCodeStart
            { Fl_Choice* o = new Fl_Choice(955, 750, 75, 15, "Printer definition");
              o->down_box(FL_BORDER_BOX);
              o->menu(menu_Printer);
            } // Fl_Choice* o
            o->end();
          } // Fl_Group* o
          { Fl_Text_Editor* o = GCodeLayer = new Fl_Text_Editor(830, 140, 530, 695, "Next layer");
            GCodeLayer->hide();
            Fl_Text_Buffer *layerbuff = new Fl_Text_Buffer();
            o->buffer(layerbuff);
          } // Fl_Text_Editor* GCodeLayer
          { Fl_Text_Editor* o = GCodeEnd = new Fl_Text_Editor(830, 140, 530, 695, "End code");
            GCodeEnd->hide();
            Fl_Text_Buffer *endbuff = new Fl_Text_Buffer();
            o->buffer(endbuff);
          } // Fl_Text_Editor* GCodeEnd
          { Fl_Text_Editor* o = GCodeResult = new Fl_Text_Editor(830, 140, 530, 695, "Result");
            GCodeResult->hide();
            Fl_Text_Buffer *resultbuff = new Fl_Text_Buffer();
            o->buffer(resultbuff);
          } // Fl_Text_Editor* GCodeResult
          o->end();
        } // Fl_Tabs* o
        { Fl_Button* o = new Fl_Button(1215, 90, 145, 25, "Save Gcode");
          o->callback((Fl_Callback*)cb_Save2);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(830, 40, 545, 795, "Score");
        o->hide();
        { new Fl_Button(840, 65, 535, 140, "Placeholder and reminder for antomatic Score\'ing of objects (see todo folder\
)");
        } // Fl_Button* o
        { new Fl_Button(840, 245, 535, 30, "Make custom buttons where you can store GCODE and run at will");
        } // Fl_Button* o
        { new Fl_Button(840, 315, 535, 30, "Add variables to start, layer and end gcode");
        } // Fl_Button* o
        { new Fl_Button(840, 350, 535, 30, "Avoid voids when moving - pathfinding");
        } // Fl_Button* o
        { new Fl_Button(840, 385, 535, 30, "Sliders to move head interactivily");
        } // Fl_Button* o
        { new Fl_Button(840, 210, 535, 30, "Type input where you can send gcode interactivly");
        } // Fl_Button* o
        { new Fl_Button(840, 280, 535, 30, "Temperature reading");
        } // Fl_Button* o
        { new Fl_Button(840, 420, 535, 30, "Speed input and interactive start/stop of extruder");
        } // Fl_Button* o
        { new Fl_Button(840, 455, 535, 30, "Fix shrink code");
        } // Fl_Button* o
        { new Fl_Button(840, 490, 535, 50, "Fix printing of objects where the called-for thickness of the part is less th\
an twice the filament extrusion. - with one line only");
        } // Fl_Button* o
        { Fl_Text_Editor* o = NotesEditor = new Fl_Text_Editor(840, 560, 535, 270, "Notes");
          Fl_Text_Buffer *NotesBuff = new Fl_Text_Buffer();
          o->buffer(NotesBuff);
        } // Fl_Text_Editor* NotesEditor
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(830, 40, 545, 795, "Rendering");
        o->color((Fl_Color)FL_DARK1);
        o->hide();
        { Fl_Group* o = new Fl_Group(835, 70, 535, 280, "STL rendering");
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)FL_DARK3);
          { DisplayPolygonsButton = new Fl_Light_Button(870, 80, 220, 20, "Display Polygons");
            DisplayPolygonsButton->value(1);
            DisplayPolygonsButton->selection_color((Fl_Color)FL_GREEN);
            DisplayPolygonsButton->callback((Fl_Callback*)cb_DisplayPolygonsButton);
          } // Fl_Light_Button* DisplayPolygonsButton
          { DisplayWireframeButton = new Fl_Light_Button(1135, 80, 140, 20, "Display Wireframe");
            DisplayWireframeButton->selection_color((Fl_Color)FL_GREEN);
            DisplayWireframeButton->callback((Fl_Callback*)cb_DisplayWireframeButton);
          } // Fl_Light_Button* DisplayWireframeButton
          { DisplayNormalsButton = new Fl_Light_Button(870, 180, 220, 20, "Display Normals");
            DisplayNormalsButton->selection_color((Fl_Color)FL_GREEN);
            DisplayNormalsButton->callback((Fl_Callback*)cb_DisplayNormalsButton);
          } // Fl_Light_Button* DisplayNormalsButton
          { DisplayEndpointsButton = new Fl_Light_Button(1135, 180, 220, 20, "Display Endpoints");
            DisplayEndpointsButton->selection_color((Fl_Color)FL_GREEN);
            DisplayEndpointsButton->callback((Fl_Callback*)cb_DisplayEndpointsButton);
          } // Fl_Light_Button* DisplayEndpointsButton
          { PolygonValSlider = new Fl_Value_Slider(870, 145, 220, 20, "Val");
            PolygonValSlider->type(5);
            PolygonValSlider->selection_color((Fl_Color)2);
            PolygonValSlider->value(0.5);
            PolygonValSlider->textsize(14);
            PolygonValSlider->callback((Fl_Callback*)cb_PolygonValSlider);
            PolygonValSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* PolygonValSlider
          { PolygonSatSlider = new Fl_Value_Slider(870, 125, 220, 20, "Sat");
            PolygonSatSlider->type(5);
            PolygonSatSlider->selection_color((Fl_Color)2);
            PolygonSatSlider->value(0.5);
            PolygonSatSlider->textsize(14);
            PolygonSatSlider->callback((Fl_Callback*)cb_PolygonSatSlider);
            PolygonSatSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* PolygonSatSlider
          { PolygonHueSlider = new Fl_Value_Slider(870, 105, 220, 20, "Hue");
            PolygonHueSlider->type(5);
            PolygonHueSlider->selection_color((Fl_Color)2);
            PolygonHueSlider->value(0.5);
            PolygonHueSlider->textsize(14);
            PolygonHueSlider->callback((Fl_Callback*)cb_PolygonHueSlider);
            PolygonHueSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* PolygonHueSlider
          { WireframeValSlider = new Fl_Value_Slider(1135, 145, 220, 20, "Val");
            WireframeValSlider->type(5);
            WireframeValSlider->selection_color((Fl_Color)2);
            WireframeValSlider->value(0.5);
            WireframeValSlider->textsize(14);
            WireframeValSlider->callback((Fl_Callback*)cb_WireframeValSlider);
            WireframeValSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* WireframeValSlider
          { WireframeSatSlider = new Fl_Value_Slider(1135, 125, 220, 20, "Sat");
            WireframeSatSlider->type(5);
            WireframeSatSlider->selection_color((Fl_Color)2);
            WireframeSatSlider->value(0.5);
            WireframeSatSlider->textsize(14);
            WireframeSatSlider->callback((Fl_Callback*)cb_WireframeSatSlider);
            WireframeSatSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* WireframeSatSlider
          { WireframeHueSlider = new Fl_Value_Slider(1135, 105, 220, 20, "Hue");
            WireframeHueSlider->type(5);
            WireframeHueSlider->selection_color((Fl_Color)2);
            WireframeHueSlider->value(0.5);
            WireframeHueSlider->textsize(14);
            WireframeHueSlider->callback((Fl_Callback*)cb_WireframeHueSlider);
            WireframeHueSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* WireframeHueSlider
          { NormalValSlider = new Fl_Value_Slider(870, 245, 220, 20, "Val");
            NormalValSlider->type(5);
            NormalValSlider->selection_color((Fl_Color)2);
            NormalValSlider->value(0.5);
            NormalValSlider->textsize(14);
            NormalValSlider->callback((Fl_Callback*)cb_NormalValSlider);
            NormalValSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* NormalValSlider
          { NormalSatSlider = new Fl_Value_Slider(870, 225, 220, 20, "Sat");
            NormalSatSlider->type(5);
            NormalSatSlider->selection_color((Fl_Color)2);
            NormalSatSlider->value(0.5);
            NormalSatSlider->textsize(14);
            NormalSatSlider->callback((Fl_Callback*)cb_NormalSatSlider);
            NormalSatSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* NormalSatSlider
          { NormalHueSlider = new Fl_Value_Slider(870, 205, 220, 20, "Hue");
            NormalHueSlider->type(5);
            NormalHueSlider->selection_color((Fl_Color)2);
            NormalHueSlider->value(0.5);
            NormalHueSlider->textsize(14);
            NormalHueSlider->callback((Fl_Callback*)cb_NormalHueSlider);
            NormalHueSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* NormalHueSlider
          { EndpointValSlider = new Fl_Value_Slider(1135, 245, 220, 20, "Val");
            EndpointValSlider->type(5);
            EndpointValSlider->selection_color((Fl_Color)2);
            EndpointValSlider->value(0.5);
            EndpointValSlider->textsize(14);
            EndpointValSlider->callback((Fl_Callback*)cb_EndpointValSlider);
            EndpointValSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* EndpointValSlider
          { EndpointSatSlider = new Fl_Value_Slider(1135, 225, 220, 20, "Sat");
            EndpointSatSlider->type(5);
            EndpointSatSlider->selection_color((Fl_Color)2);
            EndpointSatSlider->value(0.5);
            EndpointSatSlider->textsize(14);
            EndpointSatSlider->callback((Fl_Callback*)cb_EndpointSatSlider);
            EndpointSatSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* EndpointSatSlider
          { EndpointHueSlider = new Fl_Value_Slider(1135, 205, 220, 20, "Hue");
            EndpointHueSlider->type(5);
            EndpointHueSlider->selection_color((Fl_Color)2);
            EndpointHueSlider->value(0.5);
            EndpointHueSlider->textsize(14);
            EndpointHueSlider->callback((Fl_Callback*)cb_EndpointHueSlider);
            EndpointHueSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* EndpointHueSlider
          { DisplayBBoxButton = new Fl_Light_Button(870, 325, 220, 20, "Display Bounding Box");
            DisplayBBoxButton->selection_color((Fl_Color)FL_GREEN);
            DisplayBBoxButton->callback((Fl_Callback*)cb_DisplayBBoxButton);
          } // Fl_Light_Button* DisplayBBoxButton
          { HighlightSlider = new Fl_Value_Slider(1135, 325, 220, 20, "Highlight");
            HighlightSlider->type(5);
            HighlightSlider->selection_color((Fl_Color)2);
            HighlightSlider->value(0.5);
            HighlightSlider->textsize(14);
            HighlightSlider->callback((Fl_Callback*)cb_HighlightSlider);
            HighlightSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* HighlightSlider
          { NormalLengthSlider = new Fl_Value_Slider(870, 285, 220, 20, "Normals length");
            NormalLengthSlider->type(5);
            NormalLengthSlider->selection_color((Fl_Color)2);
            NormalLengthSlider->minimum(1);
            NormalLengthSlider->maximum(30);
            NormalLengthSlider->step(0.1);
            NormalLengthSlider->value(10);
            NormalLengthSlider->textsize(14);
            NormalLengthSlider->callback((Fl_Callback*)cb_NormalLengthSlider);
            NormalLengthSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* NormalLengthSlider
          { EndpointSizeSlider = new Fl_Value_Slider(1135, 285, 220, 20, "Endpoints size");
            EndpointSizeSlider->type(5);
            EndpointSizeSlider->selection_color((Fl_Color)2);
            EndpointSizeSlider->minimum(1);
            EndpointSizeSlider->maximum(20);
            EndpointSizeSlider->step(0.1);
            EndpointSizeSlider->value(8);
            EndpointSizeSlider->textsize(14);
            EndpointSizeSlider->callback((Fl_Callback*)cb_EndpointSizeSlider);
            EndpointSizeSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* EndpointSizeSlider
          { DisplayWireframeShadedButton = new Fl_Light_Button(1280, 80, 75, 20, "Shaded");
            DisplayWireframeShadedButton->selection_color((Fl_Color)FL_GREEN);
            DisplayWireframeShadedButton->callback((Fl_Callback*)cb_DisplayWireframeShadedButton);
          } // Fl_Light_Button* DisplayWireframeShadedButton
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(835, 370, 535, 185, "GCode rendering");
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)FL_DARK3);
          { DisplayGCodeButton = new Fl_Light_Button(870, 380, 220, 20, "Display GCode");
            DisplayGCodeButton->value(1);
            DisplayGCodeButton->selection_color((Fl_Color)FL_GREEN);
            DisplayGCodeButton->callback((Fl_Callback*)cb_DisplayGCodeButton);
          } // Fl_Light_Button* DisplayGCodeButton
          { GCodeExtrudeValSlider = new Fl_Value_Slider(870, 445, 220, 20, "Val");
            GCodeExtrudeValSlider->type(5);
            GCodeExtrudeValSlider->selection_color((Fl_Color)2);
            GCodeExtrudeValSlider->value(0.5);
            GCodeExtrudeValSlider->textsize(14);
            GCodeExtrudeValSlider->callback((Fl_Callback*)cb_GCodeExtrudeValSlider);
            GCodeExtrudeValSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* GCodeExtrudeValSlider
          { GCodeExtrudeSatSlider = new Fl_Value_Slider(870, 425, 220, 20, "Sat");
            GCodeExtrudeSatSlider->type(5);
            GCodeExtrudeSatSlider->selection_color((Fl_Color)2);
            GCodeExtrudeSatSlider->value(0.5);
            GCodeExtrudeSatSlider->textsize(14);
            GCodeExtrudeSatSlider->callback((Fl_Callback*)cb_GCodeExtrudeSatSlider);
            GCodeExtrudeSatSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* GCodeExtrudeSatSlider
          { GCodeExtrudeHueSlider = new Fl_Value_Slider(870, 405, 220, 20, "Hue");
            GCodeExtrudeHueSlider->type(5);
            GCodeExtrudeHueSlider->selection_color((Fl_Color)2);
            GCodeExtrudeHueSlider->value(0.5);
            GCodeExtrudeHueSlider->textsize(14);
            GCodeExtrudeHueSlider->callback((Fl_Callback*)cb_GCodeExtrudeHueSlider);
            GCodeExtrudeHueSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* GCodeExtrudeHueSlider
          { LuminanceShowsSpeedButton = new Fl_Light_Button(1135, 380, 220, 20, "Luminance shows speed");
            LuminanceShowsSpeedButton->value(1);
            LuminanceShowsSpeedButton->selection_color((Fl_Color)FL_GREEN);
            LuminanceShowsSpeedButton->callback((Fl_Callback*)cb_LuminanceShowsSpeedButton);
          } // Fl_Light_Button* LuminanceShowsSpeedButton
          { Fl_Button* o = new Fl_Button(870, 520, 220, 20, "Crop Range");
            o->callback((Fl_Callback*)cb_Crop);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(1140, 520, 220, 20, "Reset crop range");
            o->callback((Fl_Callback*)cb_Reset);
          } // Fl_Button* o
          { GCodeDrawStartSlider = new Fl_Slider(870, 470, 490, 20, "From");
            GCodeDrawStartSlider->type(1);
            GCodeDrawStartSlider->color((Fl_Color)FL_DARK3);
            GCodeDrawStartSlider->selection_color((Fl_Color)2);
            GCodeDrawStartSlider->callback((Fl_Callback*)cb_GCodeDrawStartSlider);
            GCodeDrawStartSlider->align(FL_ALIGN_LEFT);
          } // Fl_Slider* GCodeDrawStartSlider
          { GCodeDrawEndSlider = new Fl_Slider(870, 495, 490, 20, "To");
            GCodeDrawEndSlider->type(1);
            GCodeDrawEndSlider->color((Fl_Color)FL_DARK3);
            GCodeDrawEndSlider->selection_color((Fl_Color)2);
            GCodeDrawEndSlider->callback((Fl_Callback*)cb_GCodeDrawEndSlider);
            GCodeDrawEndSlider->align(FL_ALIGN_LEFT);
          } // Fl_Slider* GCodeDrawEndSlider
          { GCodeMoveValSlider = new Fl_Value_Slider(1135, 445, 220, 20, "Val");
            GCodeMoveValSlider->type(5);
            GCodeMoveValSlider->selection_color((Fl_Color)2);
            GCodeMoveValSlider->value(0.5);
            GCodeMoveValSlider->textsize(14);
            GCodeMoveValSlider->callback((Fl_Callback*)cb_GCodeMoveValSlider);
            GCodeMoveValSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* GCodeMoveValSlider
          { GCodeMoveSatSlider = new Fl_Value_Slider(1135, 425, 220, 20, "Sat");
            GCodeMoveSatSlider->type(5);
            GCodeMoveSatSlider->selection_color((Fl_Color)2);
            GCodeMoveSatSlider->value(0.5);
            GCodeMoveSatSlider->textsize(14);
            GCodeMoveSatSlider->callback((Fl_Callback*)cb_GCodeMoveSatSlider);
            GCodeMoveSatSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* GCodeMoveSatSlider
          { GCodeMoveHueSlider = new Fl_Value_Slider(1135, 405, 220, 20, "Hue");
            GCodeMoveHueSlider->type(5);
            GCodeMoveHueSlider->selection_color((Fl_Color)2);
            GCodeMoveHueSlider->value(0.5);
            GCodeMoveHueSlider->textsize(14);
            GCodeMoveHueSlider->callback((Fl_Callback*)cb_GCodeMoveHueSlider);
            GCodeMoveHueSlider->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* GCodeMoveHueSlider
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(835, 585, 540, 90, "Layer preview");
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)FL_DARK3);
          { CuttingPlaneValueSlider = new Fl_Value_Slider(845, 645, 515, 20, "Cuttingplane");
            CuttingPlaneValueSlider->type(5);
            CuttingPlaneValueSlider->value(0.5);
            CuttingPlaneValueSlider->textsize(14);
            CuttingPlaneValueSlider->callback((Fl_Callback*)cb_CuttingPlaneValueSlider);
            CuttingPlaneValueSlider->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Slider* CuttingPlaneValueSlider
          { DisplayCuttingPlaneButton = new Fl_Light_Button(845, 600, 170, 20, "Display CuttingPlane");
            DisplayCuttingPlaneButton->selection_color((Fl_Color)FL_GREEN);
            DisplayCuttingPlaneButton->callback((Fl_Callback*)cb_DisplayCuttingPlaneButton);
          } // Fl_Light_Button* DisplayCuttingPlaneButton
          { DisplayinFillButton = new Fl_Light_Button(1020, 600, 165, 20, "Display inFill");
            DisplayinFillButton->selection_color((Fl_Color)FL_GREEN);
            DisplayinFillButton->callback((Fl_Callback*)cb_DisplayinFillButton);
          } // Fl_Light_Button* DisplayinFillButton
          { DisplayAllLayersButton = new Fl_Light_Button(1190, 600, 170, 20, "Display all layers");
            DisplayAllLayersButton->selection_color((Fl_Color)FL_GREEN);
            DisplayAllLayersButton->callback((Fl_Callback*)cb_DisplayAllLayersButton);
          } // Fl_Light_Button* DisplayAllLayersButton
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(835, 710, 540, 70, "Lights");
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)FL_DARK3);
          { Fl_Light_Button* o = new Fl_Light_Button(845, 725, 120, 20, "Enable light 0");
            o->value(1);
            o->selection_color((Fl_Color)FL_GREEN);
            o->callback((Fl_Callback*)cb_Enable);
          } // Fl_Light_Button* o
          { Fl_Light_Button* o = new Fl_Light_Button(845, 750, 120, 20, "Enable light 1");
            o->selection_color((Fl_Color)FL_GREEN);
            o->callback((Fl_Callback*)cb_Enable1);
          } // Fl_Light_Button* o
          { Fl_Light_Button* o = new Fl_Light_Button(1105, 725, 120, 20, "Enable light 2");
            o->selection_color((Fl_Color)FL_GREEN);
            o->callback((Fl_Callback*)cb_Enable2);
          } // Fl_Light_Button* o
          { Fl_Light_Button* o = new Fl_Light_Button(1105, 750, 120, 20, "Enable light 3");
            o->value(1);
            o->selection_color((Fl_Color)FL_GREEN);
            o->callback((Fl_Callback*)cb_Enable3);
          } // Fl_Light_Button* o
          { Fl_Button* o = new Fl_Button(970, 725, 130, 20, "Edit light 0");
            o->deactivate();
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(970, 750, 130, 20, "Edit light 1");
            o->deactivate();
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(1230, 725, 130, 20, "Edit light 2");
            o->deactivate();
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(1230, 750, 130, 20, "Edit light 3");
            o->deactivate();
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(830, 40, 550, 795, "Print");
        o->color((Fl_Color)FL_DARK1);
        { ExamineSlider = new Fl_Value_Slider(895, 810, 200, 20, "Examine");
          ExamineSlider->type(1);
          ExamineSlider->step(0.001);
          ExamineSlider->value(0.098);
          ExamineSlider->textsize(14);
          ExamineSlider->callback((Fl_Callback*)cb_ExamineSlider);
          ExamineSlider->align(FL_ALIGN_LEFT);
          ExamineSlider->hide();
        } // Fl_Value_Slider* ExamineSlider
        { DisplayDebuginFillButton = new Fl_Light_Button(910, 790, 145, 20, "Display Debug inFill");
          DisplayDebuginFillButton->selection_color((Fl_Color)FL_GREEN);
          DisplayDebuginFillButton->callback((Fl_Callback*)cb_DisplayDebuginFillButton);
          DisplayDebuginFillButton->hide();
        } // Fl_Light_Button* DisplayDebuginFillButton
        { DisplayDebugButton = new Fl_Light_Button(835, 790, 70, 20, "Debug");
          DisplayDebugButton->selection_color((Fl_Color)FL_GREEN);
          DisplayDebugButton->callback((Fl_Callback*)cb_DisplayDebugButton);
          DisplayDebugButton->hide();
        } // Fl_Light_Button* DisplayDebugButton
        { DrawVertexNumbersButton = new Fl_Light_Button(1060, 790, 155, 20, "Draw vertex numbers");
          DrawVertexNumbersButton->selection_color((Fl_Color)FL_GREEN);
          DrawVertexNumbersButton->callback((Fl_Callback*)cb_DrawVertexNumbersButton);
          DrawVertexNumbersButton->hide();
        } // Fl_Light_Button* DrawVertexNumbersButton
        { DrawLineNumbersButton = new Fl_Light_Button(1215, 790, 155, 20, "Draw line numbers");
          DrawLineNumbersButton->selection_color((Fl_Color)FL_GREEN);
          DrawLineNumbersButton->callback((Fl_Callback*)cb_DrawLineNumbersButton);
          DrawLineNumbersButton->hide();
        } // Fl_Light_Button* DrawLineNumbersButton
        { ConnectToPrinterButton = new Fl_Light_Button(840, 45, 165, 25, "Connect to printer");
          ConnectToPrinterButton->callback((Fl_Callback*)cb_ConnectToPrinterButton);
        } // Fl_Light_Button* ConnectToPrinterButton
        { PrintButton = new Fl_Light_Button(1010, 45, 165, 25, "Print");
          PrintButton->callback((Fl_Callback*)cb_PrintButton);
        } // Fl_Light_Button* PrintButton
        { Fl_Tabs* o = new Fl_Tabs(835, 85, 535, 745);
          { CommunationLog = new Fl_Multi_Browser(840, 110, 530, 720, "Communication log");
            CommunationLog->box(FL_NO_BOX);
            CommunationLog->color((Fl_Color)FL_BACKGROUND2_COLOR);
            CommunationLog->selection_color((Fl_Color)FL_SELECTION_COLOR);
            CommunationLog->labeltype(FL_NORMAL_LABEL);
            CommunationLog->labelfont(0);
            CommunationLog->labelsize(14);
            CommunationLog->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
            CommunationLog->align(FL_ALIGN_BOTTOM);
            CommunationLog->when(FL_WHEN_RELEASE_ALWAYS);
            CommunationLog->hide();
          } // Fl_Multi_Browser* CommunationLog
          { ErrorLog = new Fl_Multi_Browser(840, 110, 530, 720, "Errors / warnings");
            ErrorLog->box(FL_NO_BOX);
            ErrorLog->color((Fl_Color)FL_BACKGROUND2_COLOR);
            ErrorLog->selection_color((Fl_Color)FL_SELECTION_COLOR);
            ErrorLog->labeltype(FL_NORMAL_LABEL);
            ErrorLog->labelfont(0);
            ErrorLog->labelsize(14);
            ErrorLog->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
            ErrorLog->align(FL_ALIGN_BOTTOM);
            ErrorLog->when(FL_WHEN_RELEASE_ALWAYS);
            ErrorLog->hide();
          } // Fl_Multi_Browser* ErrorLog
          { Echo = new Fl_Multi_Browser(840, 110, 530, 720, "Echo");
            Echo->box(FL_NO_BOX);
            Echo->color((Fl_Color)FL_BACKGROUND2_COLOR);
            Echo->selection_color((Fl_Color)FL_SELECTION_COLOR);
            Echo->labeltype(FL_NORMAL_LABEL);
            Echo->labelfont(0);
            Echo->labelsize(14);
            Echo->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
            Echo->align(FL_ALIGN_BOTTOM);
            Echo->when(FL_WHEN_RELEASE_ALWAYS);
            Echo->hide();
          } // Fl_Multi_Browser* Echo
          { Fl_Group* o = new Fl_Group(840, 110, 530, 720, "Interactive control");
            { Fl_Slider* o = new Fl_Slider(875, 125, 405, 20, "X");
              o->type(5);
              o->color((Fl_Color)FL_DARK3);
              o->selection_color((Fl_Color)2);
              o->minimum(-5000);
              o->maximum(5000);
              o->step(1);
              o->align(FL_ALIGN_LEFT);
            } // Fl_Slider* o
            { SwitchHeatOnButton = new Fl_Light_Button(845, 300, 220, 25, "Switch heat on");
              SwitchHeatOnButton->callback((Fl_Callback*)cb_SwitchHeatOnButton);
            } // Fl_Light_Button* SwitchHeatOnButton
            { TargetTempText = new Fl_Value_Input(1300, 301, 55, 24, "Target temp");
              TargetTempText->maximum(300);
              TargetTempText->value(63);
              TargetTempText->callback((Fl_Callback*)cb_TargetTempText);
            } // Fl_Value_Input* TargetTempText
            { RunExtruderButton = new Fl_Light_Button(845, 330, 115, 25, "Run extruder");
              RunExtruderButton->callback((Fl_Callback*)cb_RunExtruderButton);
            } // Fl_Light_Button* RunExtruderButton
            { SetExtruderDirectionButton = new Fl_Light_Button(965, 330, 100, 25, "Reverse");
              SetExtruderDirectionButton->callback((Fl_Callback*)cb_SetExtruderDirectionButton);
            } // Fl_Light_Button* SetExtruderDirectionButton
            { Fl_Slider* o = new Fl_Slider(875, 150, 405, 20, "Y");
              o->type(5);
              o->color((Fl_Color)FL_DARK3);
              o->selection_color((Fl_Color)2);
              o->minimum(-5000);
              o->maximum(5000);
              o->step(1);
              o->align(FL_ALIGN_LEFT);
            } // Fl_Slider* o
            { Fl_Slider* o = new Fl_Slider(875, 175, 405, 20, "Z");
              o->type(5);
              o->color((Fl_Color)FL_DARK3);
              o->selection_color((Fl_Color)2);
              o->minimum(-5000);
              o->maximum(5000);
              o->step(1);
              o->align(FL_ALIGN_LEFT);
            } // Fl_Slider* o
            { new Fl_Button(1285, 125, 68, 20, "Home");
            } // Fl_Button* o
            { new Fl_Button(1285, 150, 68, 20, "Home");
            } // Fl_Button* o
            { new Fl_Button(1285, 175, 68, 20, "Home");
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(1180, 200, 173, 20, "Find position in Gcode");
              o->deactivate();
            } // Fl_Button* o
            { Fl_Value_Slider* o = new Fl_Value_Slider(1120, 330, 235, 25, "Speed");
              o->type(5);
              o->minimum(100);
              o->maximum(9999);
              o->step(100);
              o->value(3000);
              o->textsize(14);
              o->callback((Fl_Callback*)cb_Speed);
              o->align(FL_ALIGN_LEFT);
            } // Fl_Value_Slider* o
            { Fl_Value_Slider* o = new Fl_Value_Slider(1120, 360, 235, 25, "Length");
              o->type(5);
              o->minimum(10);
              o->maximum(9999);
              o->step(100);
              o->value(750);
              o->textsize(14);
              o->callback((Fl_Callback*)cb_Length);
              o->align(FL_ALIGN_LEFT);
            } // Fl_Value_Slider* o
            { GCodeInput = new Fl_Input(895, 225, 385, 20, "GCode");
            } // Fl_Input* GCodeInput
            { Fl_Button* o = new Fl_Button(1285, 225, 68, 20, "Send");
              o->callback((Fl_Callback*)cb_Send);
            } // Fl_Button* o
            { CurrentTempText = new Fl_Output(1160, 301, 55, 24, "Current temp");
            } // Fl_Output* CurrentTempText
            o->end();
          } // Fl_Group* o
          o->end();
        } // Fl_Tabs* o
        { ContinueButton = new Fl_Light_Button(1180, 45, 165, 25, "Nudge");
          ContinueButton->callback((Fl_Callback*)cb_ContinueButton);
        } // Fl_Light_Button* ContinueButton
        o->end();
      } // Fl_Group* o
      Tabs->end();
    } // Fl_Tabs* Tabs
    { ProgressBar = new Fl_Progress(75, 5, 1300, 15, "Progress:");
      ProgressBar->selection_color((Fl_Color)FL_GREEN);
      ProgressBar->align(FL_ALIGN_LEFT);
      Fl_Group::current()->resizable(ProgressBar);
    } // Fl_Progress* ProgressBar
    mainWindow->end();
  } // Fl_Double_Window* mainWindow
}

void GUI::show(int argc, char **argv) {
  Fl::visual( FL_DOUBLE | FL_RGB);
Fl::scheme("plastic");
mainWindow->show(argc, argv);
//MVC->ReadStl("C:/box.stl");
MVC->init();
//MVC->ReadStl("C:/#Downloads/Reprap Exchange/N_DSL-Stylus.stl");
//MVC->ReadStl("C:/code/printed-parts/frame-vertex_6off.stl");
MVC->CopySettingsToGUI();
MVC->draw();
MVC->redraw();
MVC->redraw();
}
extern GUI* gui;

void TempReadTimer(void *) {
  gui->MVC->serial.SendNow("M105");
Fl::repeat_timeout(10.0f, &TempReadTimer);
}
